<html>

<head>

  <style>

    .order_item { 
      width: 100%; 
      background-color:transparent;
      border: none;
      font-size : 24pt;
    }

    .nondelivered_item { color: red; }

    .comped_item {font-style:italic; border: 6px solid #a0ffa0;}
    .held_item {border: 3px solid yellow;}

    .bev_item {color: blue;}
    .board_item {color: maroon;}
    .dessert_item {color: white;}
    .allergy_item {color: red; text-decoration: underline}

    .delivered_item { opacity: 0.3; text-align: right; text-decoration: line-through;}
    .cancelled_item { opacity: 0.3; text-align: right; color: white; background-color:  maroon; transform: scale(.8) skewx(45deg) skewy(2deg); }
    .child_item {text-align: right; font-size: 20pt;opacity: 0.8}
    
    .menu_button 
    {
      float: left;
      margin: 5px;
      font-size:14pt; font-weight:bold; height:100px; width:100px;
      background-color: #b0b0b0;
      white-space : normal;
    }

    #message_box { font-size: 32pt; background-color: red;}

    .diaframe
    {
     opacity:0.9;
     position:fixed;
     width: 75%;
     font-family:arial;
     visibility:hidden;
     border:2px outset black;
     background-color:#A0A0C0;
    }

    .diacapt
    {
     height:35px;
     width: 95%;
     background-color:#5070B0;	
     padding-top:2px;
     padding-bottom:0px;
     padding-left:5%;
     font-weight:bold;
     color:white;	
    }

    .diabutt a{
     height:15px;
     font-family:arial;
     font-weight:bold;
     font-style:italic;
     background-color:#A0F0FF;
     text-align:center;
     text-decoration:none;
     padding-top:1px;
     padding-bottom:3px;
     margin-right:2px;
     border:2px solid gray;
    }

    .diabody
    {
     padding-top:5%;
     padding-left:5%;
     padding-right:5%;
     position:absolute;
     top:17px
    }

    .diainput
    {
     padding-top:5%;
     padding-bottom:5%;
    }

    .diabuttons
    {
     padding-top:0%;
    }

    .diabuttons input
    {
      height: 60px;
      width: 90%;
      font-size: 36px;
      margin: 2%;
    }

    .diabuttons input:hover
    {
     color:red;
    }

    #main_screen
    {
      display: inline;
    }

    #receipt_screen
    {
      display: none;
    }

    #receipt_table
    {
      background-color: white;
      margin-bottom: 1em;
      padding: 1em;
    }

    #clock_screen
    {
      display: none;
    }

    #clock_screen button
    {
      width:48%;
      height:20%;
      font-size: 72pt;
      color: black;
    }

    #receipts_table 
    {
      width:100%;
      height:50%;
      color: black;
      text-align: right;
      font-size: 72pt;
      display: none;
    }

    #receipts_table input
    {
      height: 100%;
      width: 5em;
      color: black;
      float: left;
      font-size: 72pt;
    }

    #cook_screen
    {
      display: none;
    }

    #cook_screen button
    {
      width:33%;
      font-size: 30px;
      float: left;
    }

    #cook_screen .time_display
    {
    }

    #date_time_popup button
    {
      margin-left: 10%;
      margin-right: 10%;
      margin-bottom: 5%;
      width: 30%;
      font-size: 30px;
      float: left;
    }

    .cook_table{
      width: 100%;
      text-align: center;
      border-width: 1px;
      border-spacing: 2px;
      border-style: outset;
      border-color: transparent;
      border-collapse: collapse;
      background-color: #B0B080;
      float: left;
    }

    .cook_table th 
    {
      border-width: 1px;
      padding: 1px;
      border-style: inset;
      -moz-border-radius: 0px 0px 0px 0px;
    }

    .cook_table td
    {
      border-width: 1px;
      padding-right: 10px;
      padding-left: 10px;
      border-style: inset;
      -moz-border-radius: 0px 0px 0px 0px;
    }

    #receipt_screen button
    {
      font-size: 18pt;
    }  

    .centered {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    body,h1,h2,h3,h4,h5,h6 {font-family:Arial;}

    body {color:black; font-size:18;}

    h1 {font-size:28pt; font-weight:bold; margin:0px;}

    h2 {font-size:16pt; margin:0px; font-weight:bold;}

    h3 {font-size:8pt; margin:0px; font-weight:bold;}

    .supercat_head {clear: both; font-size:24pt; text-align: center; background-color: #8080ff; border: 1px inset white; margin: 6px }
    .supercat_content_div {clear: both; display: none}

    .cat_head {min-width: 150px; float:left; font-size:24pt; text-align: center; background-color: pink; border: 1px inset white; margin: 6px }
    .cat_button_div {width: 100%; float:left; display: none}
    .cat_div {}

    .leftLink {float: left; font-size:48}
    #goVerticalLink {float: right; font-size: 56; text-align: right}

    #linx {float: left; height: 95%; width: 5%; position: fixed ; background-color: #ffffb0}
    #linx a {height: 33%; width: 100%}
    #board {padding-left: 6%; width:70%; float: left}
    


    #rightside {width: 20%; position:fixed; right:2%}
    #order_pane {border: 4px outset; margin-top:10px; background-color: white;}
    #order_pane :hover {background-color: yellow;}

    #tool_tip_box{
			background-color: white; 
			border: 2px outset gray;
			width: 60%;
			font-size: 24pt;
      position: absolute;
			visibility: hidden;
			padding: 1em;
			margin: 1em;
			left: 50%;
			word-wrap: break-word;
      transform: translate(-50%, 0);
		}
    
    #table_display {width: 100%; margin: 5px; color: blue;}
    #order_items {height: 60vh; overflow-y: auto; overflow-x: clip }
    #table_id_display {width: 95%;}
    #receipt_text {font-family: monospace; font-size: 14pt;}
    #pinput_screen {
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      font-family: monospace; font-size: 28pt; 
      background-color:gray; 
      border:none;
      display: none;
    }  

    #pinput_screen input {
      font-family: monospace; font-size: 72pt; 
      background-color:transparent; 
    }  
    #pinput_screen div {
      font-family: monospace; font-size: 72pt; 
      background-color:transparent; 
    }  


  </style>

  <!--<script type="text/javascript" src="js/scripts/jquery-1.8.3.min.js"></script>-->
  <!--<link rel="stylesheet" href="jq453/jqwidgets/styles/jqx.base.css" type="text/css" />-->
  <script type="text/javascript" src="jq453/scripts/jquery-1.11.2.js"></script>
  <script type="text/javascript" src="js/printing/epos-print-4.1.0.js"></script>
  <script type="text/javascript" src="js/printing/print.js?ver181"></script>
  <script> 

    function now(){return new Date();}

    function format_time(time) {
       
       var timediff = Math.round(((new Date()).getTime() - time.getTime())/1000/60) //difference in minutes;
       if (Math.abs(timediff) < 60 /* 1 hour */) {
        result = `${timediff} m`;
       }
       else if(Math.abs(timediff) < 60*4) /* 4 hours */ {
        var hour = Math.trunc(timediff/60);
        var minute = Math.abs(timediff - hour*60);
        result = `${hour}h ${minute}m`;
       }
       else {
        result = time.toLocaleTimeString('en-US', {weekday: 'short', hour: '2-digit', minute: '2-digit'});
        result += '<br>' + time.toLocaleDateString('en-US', {month: 'short', day: '2-digit', year: 'numeric'});
       }

       return result;
    }

    /********** data transfer utils *************/
    function format_http_params(params)
    {
      var ret = [];
      for (var p in params){
        ret.push(encodeURIComponent(p) + '=' + encodeURIComponent(params[p]));
      }  
      return ret.join('&');
    }

    function http_request(method, url, params)
    {
      var http = new XMLHttpRequest();

      if(method == "GET")
      {
        // append timestamp to url to prevent caching
        url += "?timestamp=" + new Date().getTime();

        if (params) {url += "&" + params;}
        http.open(method, url, false);
        http.send(null);
      }
      else
      {
        http.open(method, url, false);
        http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); 
        http.send(params);
      }

     var response = http.responseText;

     if (http.status != 200)  {
        // Display error message on page
       document.write("Error getting config\n\n");
       document.write(http.status + '\n');
       document.write(http.readyState);
       document.write(response);
       return;
     }

     return eval('(' + response + ')');
    }  

    function async_http_request(method, url, params, callback)
    {

      var http = new XMLHttpRequest();

      http.onreadystatechange = function ()
      {
        if (http.readyState != 4) {return;} //request is not complete

        var response = http.responseText;

        if (http.status != 200)  {
        // Display error message on page
          document.write("Error getting config\n\n");
          document.write(http.status + '\n');
          document.write(http.readyState);
          document.write(response);
          return;
        }

        callback( eval('(' + response + ')') );
      }

      if(method == "GET")
      {
        // append timestamp to url to prevent caching
        url += "?timestamp=" + new Date().getTime();

        if (params) {url += "&" + params;}
        http.open(method, url, true);
        http.send(null);
      }
      else
      {
        http.open(method, url, true);
        http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); 
        http.setRequestHeader("Content-length", params.length);
        http.setRequestHeader("Connection", "close");
        http.send(params);
      }
    }  


    // This is the only script on this page. It does basically
    // everything. 
    CORONA_WINE_DISCOUNT = 6;
    CORONA_BEER_DISCOUNT = 3;
    
    MAIN_REFRESH_INTERVAL = 10000; //10 seconds
    BUTTON_HOLD_TIME = 1000; //1 second
    GRIDWIDTH = 6; 
    // GRIDWIDTH can be anything from one up.

    STAFF_FOOD_RATE = .4;
    DEFAULT_PICKUP_MINUTES = 30;

    g_currentTable = null; 
    g_cook_style = false;
    g_cafe_style = false;
    g_session_id = null;
    g_id_seq = 0;

    function init()
    // This gets called when the document loads.
    {
      document.addEventListener('click', clicked, true)
      //document.body.addEventListener('click', clicked, true)
      document.body.addEventListener('keydown', keydown, true)
      GRIDWIDTH = Math.floor(window.innerWidth - order_pane.clientWidth - linx.clientWidth) / 120

      load_config();
      document.body.style.backgroundColor = g_config.style.backgroundColor;
      document.body.style.backgroundSize = 'cover';
      document.body.style.backgroundRepeat = 'no-repeat';
      document.body.style.backgroundPosition = 'center';
      document.body.style.backgroundAttachment = 'fixed';
      document.body.style.backgroundColor = g_config.style.backgroundColor;
      document.body.style.backgroundImage = g_config.style.backgroundImage;

      //document.getElementById("portal_link").setAttribute("href", g_config.portal_url);

      get_new_session_id();
      synchronize();
      drawCurrentCategory();
    }

      
    /*** data transfer functions ***/
    function get_new_session_id()
    {
      g_session_id = http_request("GET", "action.py/get_session_id", null);
      console.log('got session id: ' + g_session_id);
    }  

    function load_config()
    {
      g_config = http_request("GET", "config.py/get", null);
    }  


    function get_new_item_id()
    {
      var id = g_session_id*100 + g_id_seq++;
      if(g_id_seq > 99)
      {
        get_new_session_id();
        g_id_seq = 0;
      }  
      return id;
    }

    g_crud_commands = [];
    function new_crud_command(command)
    {
      g_crud_commands.push(command);
      apply_crud_command(command);
    }

    function apply_crud_command(command)
    {
      console.log('apply crud ' + JSON.stringify(command));
      if (command.command == "add_item")
      {
        g_order_pane_items.push({
          item_name: command.item_name,
          table_id: command.table_id, 
          id: command.item_id,
          is_delivered: command.is_delivered, 
          is_held: false, 
          is_comped: command.is_comped, 
          price: command.price, 
          taxable: command.taxable,
          parent_item: command.parent_item,
          time_category: "Not Sent Yet", time_display: "---", pickup_time: null, minutes_since_mod: null, seconds_since_mod: null}
        )  
      }

      if (command.command == "cancel_item")
      {
        var item = get_order_pane_item(command.item_id);
        item.is_cancelled = true;
      }  

      if (command.command == "set_status")
      {
        var item = get_order_pane_item(command.item_id);
        item[command.field] = command.value;
        item.minutes_since_mod = item.seconds_since_mod = 0;
      }
      
      refresh_screen();
    }

    g_synchonize_timeout = null;
    function synchronize_now()
    {
      clearTimeout(g_synchonize_timeout);
      synchronize(async=false);
    }

    var g_in_tansit_crud_commands = null;
    var g_last_server_contact = 0;
    function handle_fresh_items(items)
    {
      console.log('fresh items');
      g_last_server_contact = new Date();
      message_box.innerHTML = '';
      g_in_tansit_crud_commands = null; //release these. they have been handled
      g_order_pane_items = items; 
      for(var idx in g_crud_commands)
      {
        apply_crud_command(g_crud_commands[idx]);
      }  
      refresh_screen();
      //clearTimeout(g_synchonize_timeout);
      g_synchonize_timeout = setTimeout(synchronize, MAIN_REFRESH_INTERVAL);
    }

    function ajax_error(jqXHR, textStatus, errorThrown) {
      if (g_in_tansit_crud_commands != null) {
        //put in transit objects back at from of queue, they need to be tried again
        g_crud_commands = g_in_tansit_crud_commands.concat(g_crud_commands);
        g_in_tansit_crud_commands = null;
      }  

      if (errorThrown != ''){
        g_synchonize_timeout = setTimeout(synchronize, MAIN_REFRESH_INTERVAL);
        document.write("<p>"+textStatus + ":w:w:" + errorThrown + "</p>" + jqXHR.responseText);
      }
      else
      { //probably network error. Silently try again in 1 minute
        g_synchonize_timeout = setTimeout(synchronize, MAIN_REFRESH_INTERVAL);
        var min_since_last_contact = (((new Date()).getTime() - g_last_server_contact.getTime()) /60000).toFixed(1);
        message_box.innerHTML = '----- ' + min_since_last_contact  + ' min. since server contact -------';
      }  
    }

    function synchronize(async)
    {
      if (typeof(async) === 'undefined') {async = true} //substitue for default args which is not supported on chrome browser

      var crud_commands = JSON.stringify(g_crud_commands); 
      g_in_tansit_crud_commands = g_crud_commands;
      g_crud_commands = [];

      console.log('async: ' + async + ' sending: ' + crud_commands);
      $.ajax({ url: "action.py/synchronize", type: "POST", dataType: "json", cache: false, async: async,
        data: {'crud_commands' : crud_commands},
        success: handle_fresh_items, error: ajax_error });
    }
      

     /******* lookup *************/
    function get_config_item_from_id(menu_item_id)
    {
      for(var supercat of g_config.menu.supercategories)
      {
        for(var cat of supercat.categories)
        {
          for(var cfg_item of cat.items)
          {
            if (cfg_item.id == menu_item_id)
            {
              return cfg_item;
            }
          }
        }
      }
			return null;
    }


     /******* lookup *************/
    function get_config_item(item_name)
    {
      console.log('get_config_item ' + item_name);
      if (item_name == null || item_name == '')
      {
        return null;
      }
      for(cat_idx in g_config.menu.supercategories)
      {
        var cat = g_config.menu.supercategories[cat_idx];
        for(subcat_idx in cat.categories)
        {
          var subcat = cat.categories[subcat_idx];
          for(item_idx in subcat.items)
          {
            var citem = subcat.items[item_idx];
            if (citem.name == item_name || citem.upc == item_name)
            {
              citem.cat = cat.name;
              citem.subcat = subcat.name;
              return citem;
            }
          }
        }
      }
    }

    function rotateCategory()
    {
      var supercategories = g_config.menu.supercategories;
      supercategories.push(supercategories.shift());
    }
      
    function make_closure(func, arg)
    {
      return function() { return func(arg)}
    }

    /******** screen drawing **********/


    function refresh_screen()
    {
      add_item_box.innerHTML = g_keyentry;
      update_order_pane(g_currentTable);
      colorTables();
      if(cook_screen.style.display == "inline") 
      {
        refresh_cook_screen();
      }
    }

    function colorTables()
    {
      var tables = [];
      for(var cidx in g_config.menu.supercategories)
      {
        if (g_config.menu.supercategories[cidx].name == 'tables'){
          for (var scidx in g_config.menu.supercategories[cidx].categories)
          {
            tables = tables.concat(g_config.menu.supercategories[cidx].categories[scidx].items);
          }
          break;
        }  
      }    

      for (idx in tables) {
        var table_id = tables[idx].name;
        var undelivered = 0; var held = 0; var delivered = 0; var paid_before_close = 0;
        for(idx in g_order_pane_items) {
          var item  = g_order_pane_items[idx];

          //console.log(table_id + '== ' + item.table_id);
          if(item.table_id == table_id) // && item.is_cancelled == false)
          {
            //console.log('yes' + tableElem.id);
            if (!item.is_delivered && !item.is_held) {undelivered += 1;}
            if (item.is_held) {held += 1;}
            if (item.is_delivered) {delivered += 1;}
            if (item.paid_before_close) {paid_before_close += 1;}
          }  
        }  
        var backgroundColor = 
          paid_before_close > 0 ? 'aqua' : 
          undelivered > 0 ? 'magenta' : 
          held > 0 ? 'yellow' : 
          delivered > 0 ? 'green' : 
          "#b0b0b0";

        table_button = document.getElementById(table_id);
        if (table_button != null)
        {
          table_button.style.backgroundColor = backgroundColor;
        }
      }  
    }

    function is_waiting_tab(input_tab)
    {
      var tab = get_config_item(input_tab);
      return (tab && (tab.category=='waiting' || tab.category=='takeout'|| tab.category=='other'));
    }

    function create_tab_descriptor_item()
    {
      var descriptor = prompt('Description for ' + g_currentTable +':');
      if (descriptor == null) return;

      new_crud_command ({
        command: 'add_item',
        item_id: get_new_item_id(),
        item_name: descriptor,
        table_id: g_currentTable, 
        is_delivered: false,
        taxable: false, 
        is_comped: false,
        is_held: false,
        price: 0,
        fraction: 0,
        parent_item: null,
        menu_item_id: null 
      });
    }

    function set_current_table(table)
    {
      console.log("set current table: " + table);
      g_currentTable = table;
      refresh_screen();
      var parent_was_set = set_current_parent();
      if (!parent_was_set && is_waiting_tab(g_currentTable)) {
        // for new tabs was_set will be false so create a descriptor item for convenience when tabs are for waiting ppl
        create_tab_descriptor_item();
      }  
    }

    g_current_parent = null;
    function set_current_parent()
    {
      for(var idx = g_order_pane_items.length - 1; idx >= 0; --idx)
      {
        var item = g_order_pane_items[idx];
        if(item.is_cancelled == false && item.table_id == g_currentTable && item.parent_item == null){ 
          g_current_parent = item.id;
          return true;
        }
      }
      return false;
    }  


    function toggle_vis(node)
    {
      console.log('toggle_vis ' + node.style.display + ' ' + node.id);
      node.style.display = (node.style.display == 'inline' ? 'none' : 'inline');
    }  

    function uncollapse(cat_div)
    {
      var head = cat_div.children[0];
      var button_div = cat_div.children[1];
      toggle_vis(button_div);
      head.style.backgroundColor = (head.style.backgroundColor == 'white' ? null : 'white');
    }  

    function drawCurrentCategory()
    // This function is called when the page a new category is
    // selected and the items in the table change. 
    {
      var board=document.getElementById("board");
      board.innerHTML = "";

      for (cidx in g_config.menu.supercategories)
      {
        var supercat = g_config.menu.supercategories[cidx];
        var cats = supercat.categories;

        var supercat_div = document.createElement('div');
        supercat_div.id = supercat.name;
        supercat_div.setAttribute("class", "supercat_div");

        var supercat_head_div = document.createElement('div');
        supercat_head_div.setAttribute("class", "supercat_head");
        supercat_head_div.textContent = supercat.name;
        supercat_div.appendChild(supercat_head_div);

        var supercat_content_div = document.createElement('div');
        supercat_content_div.id = 'cat_cd_'+supercat.name;
        supercat_content_div.setAttribute("class", "supercat_content_div");
        supercat_div.appendChild(supercat_content_div);

        supercat_head_div.onclick = make_closure(toggle_vis, supercat_content_div);

        for (cidx in cats)
        {
          cat = cats[cidx];
          var cat_div = document.createElement('div');
          cat_div.id = cat.name;
          cat_div.setAttribute("class", "cat_div");

          var cat_head_div = document.createElement('div');
          cat_head_div.setAttribute("class", "cat_head");
          cat_head_div.textContent = cat.name;
          cat_div.appendChild(cat_head_div);

          var cat_button_div = document.createElement('div');
          cat_button_div.id = 'cat_bd_'+cat.name;
          cat_button_div.setAttribute("class", "cat_button_div");
          cat_div.appendChild(cat_button_div);

          cat_head_div.onclick = make_closure(uncollapse, cat_div);

          for (iidx in cat.items.sort(function(a,b){
            return a.bin < b.bin ? -1 : a.bin > b.bin ? 1: 
            a.listorder < b.listorder? -1: a.listorder>b.listorder? 1:
            a.name - b.name}))
          {
            var item = cat.items[iidx];

            var grid_button = document.createElement('input');
            grid_button.type = 'button';
            grid_button.onclick=make_closure(grid_button_clicked, item);
            grid_button.ondblclick=make_closure(context_tool_tip, item);
            grid_button.oncontextmenu=make_closure(context_tool_tip, {'button': grid_button, 'item': item});
            grid_button.id = item.name;
            grid_button.setAttribute('class', 'menu_button');
            grid_button.value = item.name;
            cat_button_div.appendChild(grid_button);
          }
          supercat_content_div.appendChild(cat_div);
        }
        board.appendChild(supercat_div);
      }
    }

    function context_tool_tip(args)
    {
			var tool_tip_box = document.getElementById('tool_tip_box');
      var description = args.item.description ? args.item.description.replace('\n', '<br>') : '';
			tool_tip_box.innerHTML = `${args.item.name}: ${args.item.price} <br> ${description}` ;

			tool_tip_box.style.visibility ="visible";
			var button_rect  =  args.button.getBoundingClientRect()
			var buttonx = (button_rect.left + button_rect.right)/2;
			var buttony  = (button_rect.top + button_rect.bottom)/2;
			var docy = document.documentElement.clientHeight/2;
			tool_tip_box.style.top = Math.max(window.scrollY + button_rect.top - tool_tip_box.clientHeight, 0);

			return false;
    }

    function grid_button_clicked(cfg_item)
    {
      console.log('grid_button_clicked '+cfg_item.name+':'+cfg_item.supercategory+':'+cfg_item.category);
      if (cfg_item.supercategory == 'tables')
      {
        table_id = cfg_item.name;
        if(g_currentTable == table_id)
        {
          var reopen_id = http_request("GET", "reopen.py/get_reopen_id", "table="+table_id);
          if (reopen_id != null && confirm("Re-open table "+table_id+"?"))
          {
            http_request("POST", "reopen.py", "reopen_id="+reopen_id);
            synchronize_now();
          }  
        }
        if(g_tab_to_move != null)
        {
          if(confirm("Move all items from table "+g_tab_to_move+" to " + table_id+"?"))
          {
            http_request("POST", "move_tab.py", "p_from="+g_tab_to_move+"&p_to="+table_id);
            synchronize_now();
          }
          g_tab_to_move = null;
        }
        set_current_table(table_id);
      }
      else
      {
        add_to_order(cfg_item, g_currentTable);
      }
    }

    g_tab_to_move = null;
    function move_tab()
    {
      g_tab_to_move = g_currentTable;
      leave_receipt_screen();
    }

    function is_happy_hour()
    {
      if (g_config.happy_hour && g_config.happy_hour.end && g_config.happy_hour.start)
      {
        var hour_now = (new Date()).getHours();
        var day_now = (new Date()).getDay();
        var is_happy_hour = g_config.happy_hour.start <= hour_now && 
        hour_now < g_config.happy_hour.end && day_now !=0 && day_now != 6;
        console.log("is_happy_hour daynow:"+day_now+" hournow:"+hour_now);
        console.log(g_config.happy_hour);
      }  
      else
      {
        var is_happy_hour = false;
      }  
      console.log("is_happy_hour: " + is_happy_hour);
      return is_happy_hour;
    }

    function is_staff(tab)
    {
      var tab = get_config_item(tab);
      return (tab && tab.category=='staff_tabs')
    }

    function is_market(tab)
    {
      var tab = get_config_item(tab);
      return (tab && tab.category=='market')
    }

    function is_takeout(tab)
    {
      var tab = get_config_item(tab);
      return (tab && tab.category=='takeout')
    }

    var last_item_added = null;
    function add_to_order(cfg_item, table_id)
    {
      if (!table_id) {return}

      console.log('add_item: '+ cfg_item.name+':'+cfg_item.category+':'+cfg_item.supercategory);
      var price = cfg_item.price; //usual case
      var item_name = cfg_item.name; //usual case
      //now that price is set to the default, let's see if we need to modify it

      if (cfg_item.name.slice(0,3) == 'qt:')
      {
        var fraction = .25;
      }
      else if(cfg_item.scalable && cfg_item.supercategory != 'bev')
      {
        //for now the only units are lbs.
        cfg_item.scale_units = 'lbs.';

        while(true)
        {
          var fraction = prompt('Quantity in '+cfg_item.scale_units,1)
          if(!isNaN(fraction)) break;
        }
        if (fraction == null) return; //they hit cancel; don't add item

        price = cfg_item.price * fraction;
        item_name = ''+fraction + cfg_item.scale_units + ' ' + cfg_item.name;
      }  
      else
      {
        var fraction = 1;
      }  
        
      if(is_staff(g_currentTable)) 
      {
        price = cfg_item.wholesale_price || cfg_item.price*STAFF_FOOD_RATE;
        price = price*(cfg_item.fraction || 1);
      }
      else if (is_happy_hour() && !is_market(g_currentTable)  && !is_takeout(g_currentTable)  && (cfg_item.name.slice(0,3) == 'qt:' ||cfg_item.category.match('.*[Bb]eer.*')))
      {
        console.log("applying happy our discount of "+g_config.happy_hour.discount);
        price = price -price*g_config.happy_hour.discount;
      }  

      var taxable = !(cfg_item.name.match(/\bgift\b|tax-free/) || cfg_item.supercategory == 'market' && 
          cfg_item.category.match(/household|drinks|food|candy|soda/)  == null)

      if(cfg_item.name.indexOf('special') != -1)
      {
          price = prompt('Enter price:', price);
          if (price == null) return;
          item_name = prompt('Enter name:', item_name + price);
          if (item_name == null) return;
      }

      if(cfg_item.name.indexOf('gift') != -1)
      {
        price = prompt('Enter price:', price);
        if (price == null) return;
        item_name = 'gift'+price;
      }  

      var comped = false;
      if (cfg_item.name.indexOf('gratuity') != -1) {comped = true}

      var new_item_id = get_new_item_id();
      if (cfg_item.add_on) {
        var parent_item = g_current_parent;
      }else{
        var parent_item = null;
        g_current_parent = new_item_id;
      }

      new_crud_command ({
        command: 'add_item',
        item_id: new_item_id,
        item_name: item_name,
        table_id: table_id, 
        is_delivered: false,
        taxable: taxable, 
        is_comped: comped,
        price: price,
        fraction: fraction,
        parent_item: parent_item,
        menu_item_id: cfg_item.id,
      });

      add_item_box.innerHTML += " : " + cfg_item.name + ' $' + price
    } 

    function remove_from_order(item_id) 
    {
      get_item_and_child_items(item_id).forEach(function(item)
      {
        new_crud_command({command: "cancel_item", item_id: item.id});
      })
      if(item_id == g_current_parent) {set_current_parent()}
    }

    function cookscreen_table_click(table_id)
    {
      leave_cook_screen();
      set_current_table(table_id);
    }

    function cookscreen_timeclick(item_id)
    {
      var item = get_order_pane_item(item_id);
      if (item.is_cancelled) {return;}
      if (!item.is_delivered)
      {
        toggle_status(item.id, 'is_held');
      }
    }

    function cookscreen_click(item_id)
    {
      var item = get_order_pane_item(item_id);
      if (item.is_cancelled) {return;}

      if (item.is_held)
      {
        toggle_status(item.id, 'is_held');
      }
      else
      {
        toggle_status(item.id, 'is_delivered');
      }  
    }

    function toggle_status(item_id, status_field)
    {
      var new_status = !get_order_pane_item(item_id)[status_field];
      get_item_and_child_items(item_id).forEach(function(item)
      {
        new_crud_command({command: "set_status", item_id: item.id, field: status_field, value: new_status});
      })
    }

    function pin()
    {
      return pin_input().value;
    }

    function pin_input()
    {
      return document.getElementById("pinput");
    }  

    function pinput_screen()
    {
      return document.getElementById("pinput_screen");
    }  
      
    function pin_is_good(pin)
    {
      var params = "pin="+pin;
      var is_good = http_request("POST", "checkpin.py", params);
      return is_good;
    }
    
    function cook_style_order_items()
    {
      var uniq_order_items = {};
      //put all items into a dictionary whose key is all
      //properties that make us care that the items are different 
      for(var idx in g_order_pane_items)
      {
        var oi = g_order_pane_items[idx];
        var key = JSON.stringify([oi.table_id, oi.item_name, oi.is_held, oi.is_delivered, oi.price, oi.is_comped, oi.is_cancelled])
        if (key in uniq_order_items) {uniq_order_items[key].count += 1;}
        else {oi.count = 1; uniq_order_items[key] = oi;}
      }

      //now change it back to a list
      var uniq_order_items_list = [];
      for(var key in uniq_order_items) { uniq_order_items_list.push(uniq_order_items[key]); }

      //now order the list by held last then created time
      //descending
      //uniq_order_items_list.sort(
      //  function (a,b) {return a.is_held - b.is_held || b.created - a.created;}
      //);

      return uniq_order_items; //uniq_order_items_list;
    }  

    function get_child_items(item_id)
    {
      child_items = [];
      for (var idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.parent_item == item_id)
        {
          child_items.push(item);
        }
      }  
      return child_items;
    }  

    function get_item_and_child_items(item_id)
    {
      items = [];
      for (var idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.id == item_id || item.parent_item == item_id)
        {
          items.push(item);
        }
      }  
      return items;
    }  

    function get_add_on_string_for(item_id)
    {
      add_on_string = "";
      child_items = get_child_items(item_id);
      for (var idx in child_items)
      {
        if(child_items[idx].is_cancelled ){
          //TODO: show cancelled items as cancelled
          //var style_class = child_items[idx].is_cancelled ? 'cancelled_item' : null;
        } else
        {
          add_on_string += ", " + child_items[idx].item_name;
        }
      }
      return add_on_string;
    }

    function refresh_cook_screen()
    {
      var current_time_category = null;

      cook_tables_div = document.getElementById("cook_tables_div");

      //hide all time cat divs they will be made visible again if
      //and when they have items put in them
      var time_cat_divs = cook_tables_div.getElementsByClassName("cat_div");
      for (i = 0; i < time_cat_divs.length; i++) {
        time_cat_divs[i].style.display = "none";
      }

      var items = g_cook_style ? cook_style_order_items() : g_order_pane_items;
      for (var idx in items)
      {
        var item = items[idx];
        var classes = "order_item";

        if (item.is_delivered && (item.seconds_since_mod == null || item.seconds_since_mod > 15) || 
            item.table_id == 'MKT' && !g_cafe_style ||
            item.parent_item != null) 
        {
          continue;
        }

        if (item.supercategory == 'bev') {classes += ' bev_item'}
        if (item.category == 'cafe') {classes += ' cafe_item'}
        if (item.category == 'boards') {classes += ' board_item'}
        if (item.category == 'desserts') {classes += ' dessert_item'}
        if (item.category.match(/coffee/)) {classes += ' dessert_item'}
        if (item.category == 'allergy') {classes += ' allergy_item'}

        if (item.style) {classes += ' '+item.style}

        if (item.is_comped) {classes += ' comped_item'}
        if (item.is_held) {classes += ' held_item'}
        if (item.is_delivered) {classes += ' delivered_item'}
        if (item.is_cancelled) {classes += ' cancelled_item'}

        if (item.time_category != current_time_category){
          //new category
          current_time_category = item.time_category;

          var time_cat_cook_table_id = "time_cat_cook_table_"+item.time_category;
          var cook_table = document.getElementById(time_cat_cook_table_id);

          if (cook_table != null) {
            //clear old items and in prepartion for the new items
            cook_table.innerHTML = "";

            //this time category div could be in wrong order now.
            //We'll remove each and reattatch it as we go to
            //ensure propper order as given by items from server
            //then make it visible again
            var tc_div = document.getElementById("time_cat_div_"+item.time_category);
            cook_tables_div.removeChild(tc_div);
            cook_tables_div.appendChild(tc_div);
            tc_div.style.display = 'inline';
          }
          else {
            // if a cook_table doesn't already exist for this
            // category, then make one along with it's various
            // containing divs which should not exist either   

            console.log("no cook table: " + time_cat_cook_table_id + " Creating..");
            cat_div = document.createElement('div');
            cat_div.id = "time_cat_div_"+item.time_category;
            cat_div.setAttribute("class", "cat_div");
            cook_tables_div.appendChild(cat_div);
            var cat_head_div = document.createElement('div');
            cat_head_div.setAttribute("class", "supercat_head");
            cat_head_div.textContent = item.time_category;
            cat_div.appendChild(cat_head_div);
            var cat_content_div = document.createElement('div');
            cat_content_div.id = 'cat_cd_'+item.time_category;
            cat_content_div.setAttribute("class", "supercat_content_div");
            cat_div.appendChild(cat_content_div);
            cat_head_div.onclick = make_closure(toggle_vis, cat_content_div);
            var cook_table = document.createElement('table');
            cook_table.id = time_cat_cook_table_id;
            cook_table.setAttribute("class", "cook_table");
            cook_table.setAttribute("cellpadding", 2);
            cook_table.setAttribute("cellspacing", 2);
            cat_content_div.appendChild(cook_table);
          }
        }

        //add new item to current cook_table
        var table_row = document.createElement('tr');
        table_row.setAttribute('class', classes);

        var tab_col = document.createElement('td');
        tab_col.textContent = item.table_id;
        tab_col.onclick = make_closure(cookscreen_table_click, item.table_id);
        table_row.appendChild(tab_col);

        var name_col = document.createElement('td');
        name_col.textContent = (g_cook_style && item.count > 1 ? item.count + 'X ': '') + item.item_name + get_add_on_string_for(item.id);
        name_col.onclick = make_closure(cookscreen_click, item.id);
        name_col.oncontextmenu = make_closure(context_tool_tip, {'button': name_col, 'item': get_config_item_from_id(item.menu_item_id)});
        table_row.appendChild(name_col);

        var time_col = document.createElement('td');
        time_col.setAttribute('class', 'time_display');
        time_col.textContent = item.time_display;
        time_col.onclick = make_closure(cookscreen_timeclick, item.id);
        table_row.appendChild(time_col);

        cook_table.appendChild(table_row);

        /*
        cook_table.innerHTML += ( 
        '<tr class="'+ classes + '">' +
        '<td onclick="cookscreen_table_click(\'' + item.table_id + '\')">' + item.table_id + '</td>' +
        '<td onclick="cookscreen_click(' + item.id + ')">' + (g_cook_style && item.count > 1 ? item.count + 'X ': '') +
          item.item_name + get_add_on_string_for(item.id) + '</td>' +
        '<td class="time_display" onclick="cookscreen_timeclick(' + item.id + ')">'+item.time_display+'</td>' +
        '</tr>');
        */
      }  
    }

    function go_to_market()
    {
      set_current_table('MKT');
    }

    function go_to_cook_screen()
    {
      refresh_cook_screen();
      main_screen.style.display = "none";
      cook_screen.style.display = "inline";
    }

    function toggle_cafe_style()
    {
      g_cafe_style = !g_cafe_style;
      toggle_cafe_style_button.innerHTML = g_cafe_style ? 'MKT: hide': 'MKT: show';
      refresh_cook_screen();
    }

    function toggle_cook_style()
    {
      g_cook_style = !g_cook_style;
      toggle_cook_style_button.innerHTML = g_cook_style ? 'X-Style: hide': 'X-Style: show';
      refresh_cook_screen();
    }

    function leave_cook_screen()
    {
      cook_screen.style.display="none";
      main_screen.style.display="inline"; 
      refresh_screen();
    }

    function go_to_receipt_sceen()
    {
      window.scroll(0,0); 
      if(g_crud_commands.length > 0) {synchronize_now()}
      var receipt_text = http_request("POST", "texttab.py", "table="+g_currentTable);
      receipt_table.innerHTML = receipt_table_html(receipt_text);
      main_screen.style.display = "none";
      receipt_screen.style.display = "inline";
      document.getElementById('paid').innerHTML = table_is_paid(g_currentTable) ? 'Not Paid' : 'Paid';
    }  

    function go_to_clock_screen()
    {
      if (pin() == '') return set_pin_and_do(go_to_clock_screen);

      main_screen.style.display = "none";
      clock_screen.style.display = "inline";
    }  

    function leave_clock_screen()
    {
      pin_input().value = '';
      hide_receipts();
      clock_screen.style.display="none";
      main_screen.style.display="inline"; 
    }

    pin_callback=null;
    function pin_blur()
    {
      if(!pin_is_good(pin())) {
        pin_input().value = '';
        var try_again = confirm("PIN not recognized.");
        if (try_again) {
          //pin_input().focus();
          return;
        }
      }  
      else { 
        if (pin_callback != null) pin_callback();
      }  
      pin_callback=null;
      pinput_screen().style.display = 'none';
    }

    function set_pin_and_do(f)
    {
      pin_callback = f;
      pinput_screen().style.display = 'table';
      pin_input().focus();
    }
      
    function save_receipts()
    {
      var resp = http_request("POST", "server_receipt_entry.py", 
        format_http_params({
          'serverpin': pin_input().value,
          'cctotal': cctotal.value,
          'cctips': cctips.value,
          'cash_drop': cash_drop.value,
          'starting_cash': starting_cash.value,
          'cash_left_in_bank': cash_left_in_bank.value,
        })
      );
      alert('Receipts Saved.');
    }  
      
    function show_receipts()
    {
      var todays_receipts = http_request("GET", "server_receipt_entry.py/get", 
        format_http_params({'serverpin': pin_input().value}));

      for(var propt in todays_receipts){
        //fields in data have same names as input box IDs
        document.getElementById(propt).value = todays_receipts[propt]
      }

      document.getElementById("receipts_table").style.display = 'inline';
      document.getElementById("save_receipts_button").style.display='inline';
      document.getElementById("show_receipts_button").style.display='none';
      cctotal.focus();
      cctotal.select();
    }  

    function hide_receipts()
    {
      document.getElementById("receipts_table").style.display = 'none';
      document.getElementById("save_receipts_button").style.display='none';
      document.getElementById("show_receipts_button").style.display='inline';
    }

    function clockin(in_)
    {
      var resp = http_request("POST", "clockin.py", "in_="+in_+ "&serverpin="+pin());

      if (resp == 'already clocked in')
      {
        var yes = confirm('Already clocked in. Would you like to clock out and back in?')
        if(yes) {
          var resp = http_request("POST", "clockin.py", "in_=false&serverpin="+pin());
          resp += '\n' + http_request("POST", "clockin.py", "in_=true&serverpin="+pin());
        }
        else
        {
          return; //cancel
        }  
      }  
      if (resp == 'already clocked out')
      {
        var yes = confirm('Already clocked out. Would you like to clock in and back out?')
        if(yes) {
          var resp = http_request("POST", "clockin.py", "in_=true&serverpin="+pin());
          resp += '\n' + http_request("POST", "clockin.py", "in_=false&serverpin="+pin());
        }
        else
        {
          return; //cancel
        }  
      }  

      alert(resp);
      leave_clock_screen();
    }  

    function get_date_string(dat)
    {
      var y= dat.getFullYear();
      var m = dat.getMonth()+1;
      if(m<10) m="0"+m;
      var dt = dat.getDate();
      if(dt<10) dt = "0"+dt;
      return y+"-"+m+"-"+dt;
    }


    function set_pickup()
    {
      pickup_time = table_pickup_time(g_currentTable);

      date_time_popup_caption = document.getElementById("date_time_popup_caption");
      date_time_popup_caption.innerHTML = "table: "+ g_currentTable + " pickup time :"+pickup_time;

      if (pickup_time != null){
        //populate input controls with whatever time was previously set for pickup
        populate_date = new Date(pickup_time);
      }else{
        //populate with reasonable default: now +
        //DEFAULT_PICKUP_MINUTES, which should be like, 30-ish, I
        //would think
        populate_date = now();
        populate_date.setMinutes(now().getMinutes()+DEFAULT_PICKUP_MINUTES); 
      }  

      //populate the pickup date/time input controls with the
      //chosen default
      document.getElementById("pdate").value = get_date_string(populate_date);
      document.getElementById("ptime").value = `${populate_date.getHours()}:${populate_date.getMinutes()}`;

      pt_popup = document.getElementById("date_time_popup");
      pt_popup.style.visibility="visible";
      pt_popup.focus();
    }

    function set_pickup_done()
    {
      var pdate = document.getElementById("pdate").value;
      var ptime = document.getElementById("ptime").value;

      if (pdate == null || pdate =='')
      {
        alert('set valid date');
        document.getElementById("pdate").focus();
        return;
      } 

      if (ptime == null || ptime =='')
      {
        alert('set valid time');
        document.getElementById("ptime").focus();
        return;
      } 

      $.ajax({ url: "close_tab.py/set_pickup", type: "POST", dataType: "json", cache: false, async: true,
        data: {table:g_currentTable, val: pdate +' '+ ptime},
        error: ajax_error}
      );

      synchronize_now();

      pt_popup.style.visibility="hidden";
      go_to_receipt_sceen();
    }

    function set_pickup_cancel()
    {
      pt_popup.style.visibility="hidden";
    }

    function toggle_paid()
    {
      if (pin() == '') return set_pin_and_do(function(){toggle_paid()});

      console.log('setting table '+ g_currentTable + ' paid to ' + !table_is_paid(g_currentTable));

      $.ajax({ url: "close_tab.py/set_paid", type: "POST", dataType: "json", cache: false, async: false,
        data: {table:g_currentTable, val: !table_is_paid(g_currentTable), serverpin: pin()},
        error: ajax_error}
      );

      synchronize_now();
      leave_receipt_screen();
    }

    function table_is_paid(tab)
    {
      for(var idx in g_order_pane_items)
      {
        var oi = g_order_pane_items[idx];
        if (oi.paid_before_close && oi.table_id == tab) {return true;}
      }  

      return false;
    }  
      
    function table_pickup_time(tab)
    {
      for(var idx in g_order_pane_items)
      {
        var oi = g_order_pane_items[idx];
        if (oi.table_id == tab && oi.is_pickup) {return oi.pickup_time;}
      }  

      return null;
    }  
      

    function close_check(shouldPrint)
    {
      if (!table_is_paid(g_currentTable) && pin() == '') return set_pin_and_do(function(){close_check(shouldPrint)});

      response = http_request("POST", "close_tab.py", 
        "table="+g_currentTable+
        "&shouldPrint="+shouldPrint+
        "&serverpin="+pin()
      );

      if (response != null){
        if (shouldPrint) {
          epos_print(response.receipt_text, g_config.printer.ipaddr, g_config.printer.devid, g_config.printer.timeout);
        }

        for (gci in response.gift_certs){
          print_gift1(response.gift_certs[gci]);
          //alert(response.gift_certs[gci]);
        }  
      }

      synchronize_now();
      leave_receipt_screen();
    }

    g_order_pane_items = null;
    function get_order_pane_item(item_id)
    {
      console.log('get_order_pane_item: '+item_id);
      for (idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.id == item_id)
        {
          return item;
        }
      }
      console.log('get_order_pane_item id not found: '+item_id);
    }
      
    function update_order_pane(table_id)
    {
      document.getElementById("table_id_display").innerHTML = "Table: " + (table_id || '---');
      document.getElementById("order_pane").style.backgroundColor = table_is_paid(table_id) ? 'aqua' : 'white';

      var order_items = document.getElementById("order_items");
      order_items.innerHTML = '';

      for (idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
				var cfg_item = get_config_item_from_id(item.menu_item_id);

        if (item.table_id != table_id) 
        {
          continue;
        }
        
        var classes = "order_item";
        if (item.is_held) {classes += ' held_item'}
        else if (!item.is_delivered) {classes += ' nondelivered_item'}
        if (item.is_comped) { classes += ' comped_item'}
        if (item.is_cancelled) { classes += ' cancelled_item'}
        if (item.parent_item != null) {classes += ' child_item'}

				var item_button = document.createElement('input');
				item_button.setAttribute('type', 'button');
        item_button.setAttribute('class', classes);
        item_button.setAttribute('value', item.item_name);
				//item_button.textContent = item.item_name;
        item_button.oncontextmenu=make_closure(context_tool_tip, {'button': item_button, 'item': cfg_item});
				item_button.onclick=make_closure(orderitem_popup, {'button': item_button, 'item': item});

      	/*  order_items_html += '<input' +
          ' class="'+ classes + '"' +
          ' type=button' +
          ' onclick="orderitem_popup(' + item.id + ', event)"' +
          ' value="'+item.item_name+'"' +
          '></input>';*/

				order_items.appendChild(item_button);
      }  
    }
      
    function orderitem_mousedown(item_id, event, button)
    {
      button.style.backgroundColor = 'maroon';
    }  
      
    // Order popup stuff
    popup = null;
    function orderitem_popup(args)
    {
			var item_button = args.button;
			var item = args.item;

      popup = document.getElementById("orderitem_popup");
      popup.item_id = item.id;
      if (item.is_cancelled) { return;}
      g_current_parent = item.parent_item || item.id;
      popup.table_id = item.table_id;
      menu_popup_caption = document.getElementById("orderitem_popup_caption");
      menu_popup_caption.innerHTML = "table: "+item.table_id + " - " + item.item_name;
      
      holdgo_button = document.getElementById("holdgo");
      holdgo_button.style.display = item.is_delivered ? "none" : "inline";
      holdgo_button.value = item.is_held ? "release" : "hold";

      popup.style.visibility="visible";
      popup.style.left= document.body.clientWidth /8;
      //var y = mouseY(event);
      popup.style.top= Math.max(item_button.getBoundingClientRect().top - popup.clientHeight / 2, 0);
      popup.focus();
      console.log("orderitem_popup positioned at " + item_button.getBoundingClientRect().top);
    }

    function receipt_table_html(receipt_text)
    {
      return "<pre id='receipt_text'>" + receipt_text + "<\pre>"
    }

    function leave_receipt_screen()
    {
      console.log("leave receipt_screen");
      pin_input().value = "";
      receipt_screen.style.display="none";
      main_screen.style.display="inline"; 
    }

    // These functions are necessary to get the mouse position in a 
    // way that works for all browsers
    function mouseX(evt) 
    {
      if (evt.pageX) 
      {
        return evt.pageX;
      }
      else if (evt.clientX)
      {
       return evt.clientX + (document.documentElement.scrollLeft ?
       document.documentElement.scrollLeft :
       document.body.scrollLeft);
      }
      else return null;
    }

    function mouseY(evt) 
    // See comment abouve mouseX, just above
    {
      if (evt.pageY)
      {
        return evt.pageY;
      }
      else if (evt.clientY)
      {
        return evt.clientY + (document.documentElement.scrollTop ?
        document.documentElement.scrollTop :
        document.body.scrollTop);
      }
      else return null;
    }

    function plus_one()
    {
      var item = get_order_pane_item(popup.item_id);
      console.log('plus one ' + popup.item_id + ' ' + item.item_name);

      var new_item_id = get_new_item_id();

      new_crud_command ({
        command: 'add_item',
        item_id: new_item_id,
        item_name: item.item_name,
        table_id: item.table_id, 
        is_delivered: false,
        taxable: item.taxable, 
        is_comped: item.is_comped,
        price: item.price,
        fraction: item.fraction,
        parent_item: item.parent_item,
        menu_item_id: item.menu_item_id
      });
      
      //if the item we just copied and therefore the new item is
      //not an add on (which we can tell by checking if the
      //parent_item field is null) then it should become the new
      //parent for any subsequent add ons
      if (item.parent_item == null){g_current_parent = new_item_id;}

      //copy children, if any
      var child_items = get_child_items(item.id);
      for (var idx in child_items)
      {
        var item = child_items[idx];
        new_crud_command ({
          command: 'add_item',
          item_id: get_new_item_id(),
          item_name: item.item_name,
          table_id: item.table_id, 
          is_delivered: false,
          taxable: item.taxable, 
          is_comped: item.is_comped,
          price: item.price,
          fraction: item.fraction,
          parent_item: new_item_id,
          menu_item_id: item.menu_item_id
        });
      }  
    }

    function cancel_item()
    {
      remove_from_order(popup.item_id);
    }  

    g_keyentry = "";
    function keydown(event)
    {
      if(event.which == 13 && g_keyentry.length > 0)
      {
        event.preventDefault();
        text_entered(g_keyentry);
        g_keyentry = "";
      }
      else
      {
        key = String.fromCharCode(event.which);
        if(key.match(/[0-9]/))
        {
          g_keyentry += key;
          add_item_box.innerHTML = g_keyentry;
        }  
        else
        {
          g_keyentry = "";
          add_item_box.innerHTML = "";
        }
      }
    }

    function text_entered(txt)
    {
      console.log('text_entered: '+ txt);
      item = get_config_item(txt);
      if (item) 
      {
        add_to_order(item, g_currentTable)
      } 
      else 
      { 
        //add_item_box.innerHTML = txt +' - item not found in inventory')
      };
    }


    function clicked()
    {
      hidePopups();
      if (g_tab_to_move != null)
      {
      }
    }

    function hidePopups()
    // this function hides the pop-ups when any of various things happen
    {
  		var popups = document.getElementsByClassName('click_dismiss');
    	for (var popup of popups) { popup.style.visibility="hidden";}
    }

  </script>

</head>

<body onLoad="init()" id='main'>

  <div id="main_screen">
    <div id=linx>
    <!--<div><a href="javascript:goLeft()"  class="leftLink" id="goLeftLink">&lt;</a></div>-->
    <div><a href="javascript:go_to_cook_screen()"  class="leftLink" id="cooklink">C</a></div>
    <div><a href="javascript:go_to_clock_screen()"  class="leftLink" id="clocklink">P</a></div>
    <div><a href="https://sites.google.com/view/salumi/p-o-r-t-a-l" class="leftLink" id="wlink">'I'</a></div>
    </div>
    <div id="board"></div>

    <div id="rightside">
      <!--<center><a href="javascript:goVertical()" id="goVerticalLink">^</a>
      <a href="javascript:goRight()" class="leftLink" id="goleftLink">&gt;</a>
      </center>-->
      <!--<div style="clear: both"></div>-->
      <div id="order_pane">
        <div id="table_display" onclick='go_to_receipt_sceen()'>
          <button id="table_id_display" class="order_item">---</button>
        </div>
        <center>===========</center>
        <div id="order_items" onclick="null"></div>
      </div>
    </div>  

  </div>
  <!-- This div is another screen. Initially it set to 
  visibility:hidden and it will take up the whole screen
  when it is shown, so it doesn't really matter where we put it 
  in the HTML. So we put it at the begining.
  -->
  <div id="clock_screen">
    <center>
    <div>
        <button id=clock_in onclick='clockin(true)'>Clock In</button>
        <button id=clock_out onclick='clockin(false)'>Clock Out</button>
        <button id=show_receipts_button onclick='show_receipts()'>Receipts</button>
        <table id=receipts_table cellpadding="2" cellspacing="2" border="3">
          <tr><td>CCTotal</td><td><input id='cctotal' class="rec_entry" type="number"/></td></tr>
          <tr><td>CCTips</td><td><input id='cctips' class="rec_entry" type="number"/></tr>
          <tr><td>Cash Drop</td><td><input id='cash_drop' class="rec_entry" type="number"/></td></tr>
          <tr><td>Start Bank</td><td><input id='starting_cash' class="rec_entry" type="number"/></td></tr>
          <tr><td>End Bank</td><td><input id='cash_left_in_bank' class="rec_entry" type="number"/></td></tr>
        </table>
        <button id=save_receipts_button onclick='save_receipts()'>Save</button>
        <button onclick='leave_clock_screen()'>Go Back</button>
      <div>
    </center>
  </div>
  <div id="receipt_screen">
    <center>
    <table id="receipt_table"></table>

    <div>
      <button id=print_and_close onclick='close_check(true)'>Print and Close</button>
      <button id=just_close onclick='close_check(false)'>Just Close</button>
      <button onclick='move_tab()'>Move Tab</button>
      <button id=paid onclick='toggle_paid()'/>Paid</button>
      <button id=paid onclick='set_pickup()'/>Set Pickup</button>
      <button onclick='leave_receipt_screen()'/>Go Back</button>
    </div>
    </center>
  </div>

  <div id="cook_screen">
        <button id=cook_screen_go_back onclick='leave_cook_screen()'>Go Back</button>
        <button id=toggle_cook_style_button onclick='toggle_cook_style()'>X-Style: show</button>
        <button id=toggle_cafe_style_button onclick='toggle_cafe_style()'>MKT: show</button>
        <!--<table id="cook_table" cellspacing=2 cellpadding=2></table>-->
        <div id ="cook_tables_div"></div>
  </div>

  <div id ="tool_tip_box" class="click_dismiss" onclick="this.style.visibility='hidden'"> </div>

  <div id ="orderitem_popup" class="click_dismiss diaframe">
    <div id="orderitem_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <div style="float: right; width: 50%">
        <input type="button" value="plus 1" onclick="plus_one()"> 
        <input type="button" value="delivered" onclick="toggle_status(popup.item_id, 'is_delivered')"> 
        <input type="button" value="do nothing"> 
      </div>
      <div style="float: left; width: 50%">
        <input id="holdgo" type="button" value="hold" onclick="toggle_status(popup.item_id, 'is_held')"> 
        <input type="button" value="comped" onclick="toggle_status(popup.item_id, 'is_comped')"> 
        <input type="button" value="cancel" onclick="cancel_item()"> 
      </div>
    </div>
  </div>

  <div id ="date_time_popup" class="diaframe centered">
    <div id="date_time_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <input name="date" id="pdate" type="date" value=""> 
      <input name="time" id="ptime" type="time" value=""> 
    </div>
    <button id="set_pickup_done" onclick='set_pickup_done()'>Done</button>
    <button id="set_pickup_cancel" onclick='set_pickup_cancel()'>Cancel</button>
  </div>

  <div id ="scale_popup" class="diaframe">
    <div id="scale_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <input id="lbs" type="text" value="0"> 
      <input id="oz" type="text" value="0"> 
    </div>
  </div>

  <div id='pinput_screen'>
    <center>
    <input tabindex=1 id='pinput' type=number onblur='pin_blur()'/>
    <div tabindex=2 id='pintext'>Enter PIN</div>
    </center>
  </div>
  <div id="add_item_box" ></div>
  <div id="message_box" ></div>

    <!-- invisible area for drawing gift certs -->
  <div style="display:none;">
      <canvas id="canvas" width="512" height="1200"></canvas>
      <img id="cert_background" src="img/plancha_cert_back1.png" alt="">
      <!--<img id="cert_background" src="img/coffee.jpg" alt="">-->
  </div>



</body>
</html>
