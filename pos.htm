<html>

<head>

  <style>

    .order_item { 
      width: 100%; 
      background-color:transparent;
      border: none;
      font-size : 24pt;
    }

    .nondelivered_item { color: red; }

    .comped_item {font-style:italic; border: 6px solid #a0ffa0;}
    .held_item {border: 3px solid yellow;}

    .bev_item {color: blue;}
    .bev_head {color: #ddddff;}
    .board_item {color: maroon;}
    .allergy_item {color: red; text-decoration: underline}

    .delivered_item { opacity: 0.3; text-align: right; text-decoration: line-through;}
    .cancelled_item { opacity: 0.3; text-align: right; color: white; background-color:  maroon; transform: scale(.8) skewx(45deg) skewy(2deg); }
    .child_item {text-align: right; font-size: 20pt;opacity: 0.8}
    
    .menu_button 
    {
      float: left;
      margin: 5px;
      font-size:14pt; font-weight:bold; height:100px; width:100px;
      background-color:#b0b0b0;
      white-space : normal;
    }

    #message_box { font-size: 32pt; background-color: red;}

    .keypad
    {
      padding-top:25px;
    }

    .keypad button
    {
      font-size:36pt;
    }

    .keypad input
    {
      font-size:36pt;
    }

    .diaframe
    {
     opacity:0.9;
     position:absolute;
     width: 75%;
     font-family:arial;
     visibility:hidden;
     border:2px outset black;
     background-color:#A0A0C0;
    }

    .diacapt
    {
     height:35px;
     width: 95%;
     background-color:#5070B0;	
     padding-top:2px;
     padding-bottom:0px;
     padding-left:5%;
     font-weight:bold;
     color:white;	
    }

    .diabutt a{
     height:15px;
     font-family:arial;
     font-weight:bold;
     font-style:italic;
     background-color:#A0F0FF;
     text-align:center;
     text-decoration:none;
     padding-top:1px;
     padding-bottom:3px;
     margin-right:2px;
     border:2px solid gray;
    }

    .diabody
    {
     padding-top:5%;
     padding-left:5%;
     padding-right:5%;
     position:absolute;
     top:17px
    }

    .diainput
    {
     padding-top:5%;
     padding-bottom:5%;
    }

    .diabuttons
    {
     padding-top:0%;
    }

    .diabuttons input
    {
      height: 60px;
      width: 90%;
      font-size: 36px;
      margin: 2%;
    }

    .diabuttons input:hover
    {
     color:red;
    }

    #main_screen
    {
      display: inline;
    }

    #receipt_screen
    {
      display: none;
    }

    #clock_screen
    {
      display: none;
    }

    #cook_screen
    {
      display: none;
    }

    #cook_screen button
    {
      width:33%;
      font-size: 30px;
      float: left;
    }

    #cook_table{
      width: 100%;
      text-align: center;
      border-width: 1px;
      border-spacing: 2px;
      border-style: outset;
      border-color: transparent;
      border-collapse: collapse;
      background-color: #B0B080;
      float: left;
    }

    #cook_table th 
    {
      border-width: 1px;
      padding: 1px;
      border-style: inset;
      -moz-border-radius: 0px 0px 0px 0px;
    }

    #cook_table td
    {
      border-width: 1px;
      padding-right: 10px;
      padding-left: 10px;
      border-style: inset;
      -moz-border-radius: 0px 0px 0px 0px;
    }

    #receipt_screen button
    {
      font-size: 18pt;
    }  

    #clock_screen button
    {
      font-size: 18pt;
    }  

    body,h1,h2,h3,h4,h5,h6 {font-family:Arial;}

    body {background-color:gray; color:black; font-size:18;}

    h1 {font-size:28pt; font-weight:bold; margin:0px;}

    h2 {font-size:16pt; margin:0px; font-weight:bold;}

    h3 {font-size:8pt; margin:0px; font-weight:bold;}

    .cat_div {}
    .cat_head {clear: both; font-size:24pt; text-align: center; background-color: #8080ff; border: 1px inset white; margin: 6px }
    .cat_content_div {clear: both; display: none}

    .subcat_head {min-width: 150px; float:left; font-size:24pt; text-align: center; background-color: pink; border: 1px inset white; margin: 6px }
    .subcat_button_div {width: 100%; float:left; display: none}
    .subcat_div {}

    .leftLink {float: left; font-size:48}
    #goVerticalLink {float: right; font-size: 56; text-align: right}

    #linx {float: left; height: 95%; width: 5%; position: fixed ; background-color: #ffffb0}
    #linx a {height: 33%; width: 100%}
    #board {padding-left: 6%; width:70%; float: left}
    


    #rightside {width: 20%; position:fixed; right:2%}
    #order_pane {border: 4px outset; margin-top:10px; background-color: white;}
    #order_pane :hover {background-color: yellow;}
    
    #table_display {width: 100%; margin: 5px; color: blue;}
    #order_items {height: 60vh; overflow-y: auto; overflow-x: clip }
    #table_id_display {width: 95%;}
    #receipt_text {font-family: monospace; font-size: 14pt;}

  </style>

  <script type="text/javascript" src="js/scripts/jquery-1.8.3.min.js"></script>
  <script> 
    /********** data transfer utils *************/
    function http_request(method, url, params)
    {
      var http = new XMLHttpRequest();

      if(method == "GET")
      {
        // append timestamp to url to prevent caching
        url += "?timestamp=" + new Date().getTime();

        if (params) {url += "&" + params;}
        http.open(method, url, false);
        http.send(null);
      }
      else
      {
        http.open(method, url, false);
        http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); 
        http.setRequestHeader("Content-length", params.length);
        http.setRequestHeader("Connection", "close");
        http.send(params);
      }

     var response = http.responseText;

     if (http.status != 200)  {
        // Display error message on page
       document.write("Error getting config\n\n");
       document.write(http.status + '\n');
       document.write(http.readyState);
       document.write(response);
       return;
     }

     return eval('(' + response + ')');
    }  

    function async_http_request(method, url, params, callback)
    {

      var http = new XMLHttpRequest();

      http.onreadystatechange = function ()
      {
        if (http.readyState != 4) {return;} //request is not complete

        var response = http.responseText;

        if (http.status != 200)  {
        // Display error message on page
          document.write("Error getting config\n\n");
          document.write(http.status + '\n');
          document.write(http.readyState);
          document.write(response);
          return;
        }

        callback( eval('(' + response + ')') );
      }

      if(method == "GET")
      {
        // append timestamp to url to prevent caching
        url += "?timestamp=" + new Date().getTime();

        if (params) {url += "&" + params;}
        http.open(method, url, true);
        http.send(null);
      }
      else
      {
        http.open(method, url, true);
        http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); 
        http.setRequestHeader("Content-length", params.length);
        http.setRequestHeader("Connection", "close");
        http.send(params);
      }
    }  


    // This is the only script on this page. It does basically
    // everything. 
    
    MAIN_REFRESH_INTERVAL = 10000; //10 seconds
    GRIDWIDTH = 6; 
    // GRIDWIDTH can be anything from one up.

    STAFF_FOOD_RATE = .4;

    g_currentTable = null; 
    g_cook_style = false;
    g_market_style = false;
    g_session_id = null;
    g_id_seq = 0;

    function init()
    // This gets called when the document loads.
    {
      document.body.addEventListener('click', clicked, true)
      document.body.addEventListener('keydown', keydown, true)
      GRIDWIDTH = Math.floor(window.innerWidth - order_pane.clientWidth - linx.clientWidth) / 120

      load_config();
      get_new_session_id();
      synchronize();
      drawCurrentCategory();
    }

      
    /*** data transfer functions ***/
    function get_new_session_id()
    {
      g_session_id = http_request("GET", "action.py/get_session_id", null);
      console.log('got session id: ' + g_session_id);
    }  

    function load_config()
    {
      g_config = http_request("GET", "config.py/get", null);
    }  


    /******* lookup *************/
    function get_config_item(item_name)
    {
      console.log('get_config_item ' + item_name);
      if (item_name == null || item_name == '') 
      {
        return null;
      }
      for(cat_idx in g_config.menu.categories)
      {
        var cat = g_config.menu.categories[cat_idx];
        for(subcat_idx in cat.subcategories)
        {
          var subcat = cat.subcategories[subcat_idx];
          for(item_idx in subcat.items)
          {
            var citem = subcat.items[item_idx];
            if (citem.name == item_name || citem.upc == item_name)
            {
              citem.cat = cat.name;
              citem.subcat = subcat.name;
              return citem;
            }
          }
        }
      }
    }

    function get_new_item_id()
    {
      var id = g_session_id*100 + g_id_seq++;
      if(g_id_seq > 99)
      {
        get_new_session_id();
        g_id_seq = 0;
      }  
      return id;
    }

    g_crud_commands = [];
    function new_crud_command(command)
    {
      g_crud_commands.push(command);
      apply_crud_command(command);
    }

    function apply_crud_command(command)
    {
      console.log('apply crud ' + JSON.stringify(command));
      if (command.command == "add_item")
      {
        g_order_pane_items.push({
          item_name: command.item_name,
          table_id: command.table_id, 
          id: command.item_id,
          is_delivered: command.is_delivered, 
          is_held: false, 
          is_comped: command.is_comped, 
          price: command.price, 
          parent_item: command.parent_item,
          minutes_old: 0, minutes_since_mod: null, seconds_since_mod: null}
        )  
      }

      if (command.command == "cancel_item")
      {
        var item = get_order_pane_item(command.item_id);
        item.is_cancelled = true;
      }  

      if (command.command == "set_status")
      {
        var item = get_order_pane_item(command.item_id);
        item[command.field] = command.value;
        item.minutes_since_mod = item.seconds_since_mod = 0;
      }
      
      refresh_screen();
    }

    g_synchonize_timeout = null;
    function synchronize_now()
    {
      clearTimeout(g_synchonize_timeout);
      synchronize(async=false);
    }

    var g_in_tansit_crud_commands = null;
    var g_last_server_contact = 0;
    function handle_fresh_items(items)
    {
      console.log('fresh items');
      g_last_server_contact = new Date();
      message_box.innerHTML = '';
      g_in_tansit_crud_commands = null; //release these. they have been handled
      g_order_pane_items = items; 
      for(var idx in g_crud_commands)
      {
        apply_crud_command(g_crud_commands[idx]);
      }  
      refresh_screen();
      //clearTimeout(g_synchonize_timeout);
      g_synchonize_timeout = setTimeout(synchronize, MAIN_REFRESH_INTERVAL);
    }

    function ajax_error(jqXHR, textStatus, errorThrown) {
      if (g_in_tansit_crud_commands != null) {
        //put in transit objects back at from of queue, they need to be tried again
        g_crud_commands = g_in_tansit_crud_commands.concat(g_crud_commands);
        g_in_tansit_crud_commands = null;
      }  

      if (errorThrown != ''){
        alert(textStatus + ":::" + errorThrown + "\n" + jqXHR.responseText);
        g_synchonize_timeout = setTimeout(synchronize, MAIN_REFRESH_INTERVAL);
      }
      else
      { //probably network error. Silently try again in 1 minute
        g_synchonize_timeout = setTimeout(synchronize, MAIN_REFRESH_INTERVAL);
        var min_since_last_contact = (((new Date()).getTime() - g_last_server_contact.getTime()) /60000).toFixed(1);
        message_box.innerHTML = '----- ' + min_since_last_contact  + ' min. since server contact -------';
      }  
    }

    function synchronize(async)
    {
      if (typeof(async) === 'undefined') {async = true} //substitue for default args which is not supported on chrome browser

      var crud_commands = JSON.stringify(g_crud_commands); 
      g_in_tansit_crud_commands = g_crud_commands;
      g_crud_commands = [];

      console.log('async: ' + async + ' sending: ' + crud_commands);
      $.ajax({ url: "action.py/synchronize", type: "POST", dataType: "json", cache: false, async: async,
        data: {'crud_commands' : crud_commands},
        success: handle_fresh_items, error: ajax_error });
    }
      
    function rotateCategory()
    {
      var categories = g_config.menu.categories;
      categories.push(categories.shift());
    }
      
    function make_closure(func, arg)
    {
      return function() { return func(arg)}
    }

    /******** screen drawing **********/


    function refresh_screen()
    {
      add_item_box.innerHTML = g_keyentry;
      update_order_pane(g_currentTable);
      colorTables();
      if(cook_screen.style.display == "inline") 
      {
        refresh_cook_screen();
      }
    }

    function colorTables()
    {
      var tables = [];
      for(var cidx in g_config.menu.categories)
      {
        if (g_config.menu.categories[cidx].name == 'tables'){
          for (var scidx in g_config.menu.categories[cidx].subcategories)
          {
            tables = tables.concat(g_config.menu.categories[cidx].subcategories[scidx].items);
          }
          break;
        }  
      }    

      for (idx in tables) {
        var table_id = tables[idx].name;
        var undelivered = 0; var held = 0; var delivered = 0;
        for(idx in g_order_pane_items) {
          var item  = g_order_pane_items[idx];

          //console.log(table_id + '== ' + item.table_id);
          if(item.table_id == table_id) // && item.is_cancelled == false)
          {
            //console.log('yes' + tableElem.id);
            if (!item.is_delivered && !item.is_held) {undelivered += 1;}
            if (item.is_held) {held += 1;}
            if (item.is_delivered) {delivered += 1;}
          }  
        }  
        var backgroundColor = undelivered > 0 ? 'magenta' : held > 0 ? 'yellow' : delivered > 0 ? 'green' : "#b0b0b0";
        table_button = document.getElementById(table_id);
        if (table_button != null)
        {
          table_button.style.backgroundColor = backgroundColor;
        }
      }  
    }

    function set_current_table(table_id)
    {
      g_currentTable = table_id;
      refresh_screen();
      set_current_parent();
    }

    g_current_parent = null;
    function set_current_parent()
    {
      for(var idx = g_order_pane_items.length - 1; idx >= 0; --idx)
      {
        var item = g_order_pane_items[idx];
        if(item.is_cancelled == false && item.table_id == g_currentTable && item.parent_item == null){ 
          g_current_parent = item.id;
          return;
        }
      }
    }  


    function toggle_vis(node)
    {
      console.log('toggle_vis ' + node.style.display + ' ' + node.id);
      node.style.display = (node.style.display == 'inline' ? 'none' : 'inline');
    }  

    function uncollapse(subcat_div)
    {
      var head = subcat_div.children[0];
      var button_div = subcat_div.children[1];
      toggle_vis(button_div);
      head.style.backgroundColor = (head.style.backgroundColor == 'white' ? null : 'white');
    }  

    function drawCurrentCategory()
    // This function is called when the page a new category is
    // selected and the items in the table change. 
    {
      var board=document.getElementById("board");
      board.innerHTML = "";

      for (cidx in g_config.menu.categories)
      {
        var cat = g_config.menu.categories[cidx];
        var subcats = cat.subcategories;

        var cat_div = document.createElement('div');
        cat_div.id = cat.name;
        cat_div.setAttribute("class", "cat_div");

        var cat_head_div = document.createElement('div');
        cat_head_div.setAttribute("class", "cat_head");
        cat_head_div.textContent = cat.name;
        cat_div.appendChild(cat_head_div);

        var cat_content_div = document.createElement('div');
        cat_content_div.id = 'cat_cd_'+cat.name;
        cat_content_div.setAttribute("class", "cat_content_div");
        cat_div.appendChild(cat_content_div);

        cat_head_div.onclick = make_closure(toggle_vis, cat_content_div);

        for (scidx in subcats)
        {
          subcat = subcats[scidx];
          var subcat_div = document.createElement('div');
          subcat_div.id = subcat.name;
          subcat_div.setAttribute("class", "subcat_div");

          var subcat_head_div = document.createElement('div');
          subcat_head_div.setAttribute("class", "subcat_head");
          subcat_head_div.textContent = subcat.name; //cat.name + " : " + subcat.name;
          //if (scidx == 0) { subcat_head_div.style.clear = ''; subcat_head_div.style.float = 'left';} 
          subcat_div.appendChild(subcat_head_div);

          var subcat_button_div = document.createElement('div');
          subcat_button_div.id = 'subcat_bd_'+subcat.name;
          subcat_button_div.setAttribute("class", "subcat_button_div");
          subcat_div.appendChild(subcat_button_div);

          subcat_head_div.onclick = make_closure(uncollapse, subcat_div);

          for (iidx in subcat.items)
          {
            var item = subcat.items[iidx];

            var grid_button = document.createElement('input');
            grid_button.type = 'button';
            grid_button.onclick=make_closure(grid_button_clicked, item);
            grid_button.id = item.name;
            grid_button.setAttribute('class', 'menu_button');
            grid_button.value = item.name;
            subcat_button_div.appendChild(grid_button);
          }
          cat_content_div.appendChild(subcat_div);
        }
        board.appendChild(cat_div);
      }
    }

    function grid_button_clicked(cfg_item)
    {
      console.log('grid_button_clicked '+cfg_item.name);
      if (cfg_item.catname == 'tables')
      {
        table_id = cfg_item.name;
        if(g_currentTable == table_id)
        {
          var reopen_id = http_request("GET", "reopen/get_reopen_id", "table="+table_id);
          if (reopen_id != null && confirm("Re-open table "+table_id+"?"))
          {
            http_request("POST", "reopen", "reopen_id="+reopen_id);
            synchronize_now();
          }  
        }
        if(g_tab_to_move != null)
        {
          if(confirm("Move all items from table "+g_tab_to_move+" to " + table_id+"?"))
          {
            http_request("POST", "move_tab", "p_from="+g_tab_to_move+"&p_to="+table_id);
            synchronize_now();
          }
          g_tab_to_move = null;
        }
        set_current_table(table_id);
      }
      else
      {
        add_to_order(cfg_item.name, g_currentTable);
      }
    }

    g_tab_to_move = null;
    function move_tab()
    {
      g_tab_to_move = g_currentTable;
    }

    function is_staff(table_id)
    {
      var tab = get_config_item(table_id);
      return (tab && (tab.subcat == 'staff' || tab.subcat=='staff_tabs'))
    }

    var last_item_added = null;
    function add_to_order(item_key, table_id)
    {
      if (!(item_key && table_id)) {return}

      console.log('add_item: '+ item_key);
      var cfg_item = get_config_item(item_key);
      if(cfg_item == null)
      {
        alert("add item: " + item_key + " not found in config. Try reload.")
        return;
      }

      var price = cfg_item.price; //usual case
      var item_name = cfg_item.name; //usual case
      //now that price is set to the default, let's see if we need to modify it
      if('scale_units' in cfg_item)
      {
        while(true)
        {
          var scale = prompt('Quantity in '+cfg_item.scale_units,1)
          if(!isNaN(scale)) break;
        }
        if (scale == null) return; //they hit cancel; don't add item

        price = cfg_item.price * scale;
        item_name = ''+scale + cfg_item.scale_units + ' ' + cfg_item.name;
      }  
        
      if(is_staff(g_currentTable)) 
      {
        price = cfg_item.price*STAFF_FOOD_RATE;
        if ( cfg_item.cat == 'bev' && cfg_item.id != null)
        {
          var info = http_request("POST", "get_wine_info.py", "menu_item_id="+cfg_item.id);
          price = info.frontprice;
          if (price != null && price > 0 )
          {
            if (cfg_item.name.slice(0,3) == 'qt:')
            {
              price = price/4;
            }
          }
        }
      }

      var taxable = !(cfg_item.name.indexOf('gift') == 0 || cfg_item.cat == 'market' && 
          cfg_item.subcat.match(/household|drinks|food|candy|soda/)  == null)

      var delivered = (cfg_item.cat == 'market' || cfg_item.subcat == 'misc');

      if(cfg_item.name.indexOf('special') != -1)
      {
        if(cfg_item.add_on_price != null)
        {
          var special_add_price = prompt('Enter price:', cfg_item.add_on_price);
          if (special_add_price == null) return;
          cfg_item.add_on_price = special_add_price;
          item_name = prompt('Enter note:');
          if (item_name == null) return;
        }  
        else {
          price = prompt('Enter price:', price);
          if (price == null) return;
          item_name = prompt('Enter name:', item_name + price);
          if (item_name == null) return;
        }
        if(cfg_item.name.indexOf('tax-free') != -1) { taxable = false;}
      }

      if(cfg_item.name.indexOf('gift') != -1)
      {
        price = prompt('Enter price:', price);
        if (price == null) return;
        item_name = 'gift'+price;
      }  

      var comped = false;
      if (cfg_item.name.indexOf('gratuity') != -1) {comped = true}

      var new_item_id = get_new_item_id();
      if (cfg_item.add_on_price != null) {
        var parent_item = g_current_parent;
        price = cfg_item.add_on_price;
      }else{
        var parent_item = null;
        g_current_parent = new_item_id;
      }

      new_crud_command ({
        command: 'add_item',
        item_id: new_item_id,
        item_name: item_name,
        table_id: table_id, 
        is_delivered: delivered,
        taxable: taxable, 
        is_comped: comped,
        price: price,
        parent_item: parent_item,
        menu_item_id: cfg_item.id
      });

      add_item_box.innerHTML += " : " + cfg_item.name + ' $' + price
    } 

    function remove_from_order(item_id) 
    {
      get_item_and_child_items(item_id).forEach(function(item)
      {
        new_crud_command({command: "cancel_item", item_id: item.id});
      })
      if(item_id == g_current_parent) {set_current_parent()}
    }

    function cookscreen_table_click(table_id)
    {
      leave_cook_screen();
      set_current_table(table_id);
    }

    function cookscreen_timeclick(item_id)
    {
      var item = get_order_pane_item(item_id);
      if (item.is_cancelled) {return;}
      if (!item.is_delivered)
      {
        toggle_status(item.id, 'is_held');
      }
    }

    function cookscreen_click(item_id)
    {
      var item = get_order_pane_item(item_id);
      if (item.is_cancelled) {return;}

      if (item.is_held)
      {
        toggle_status(item.id, 'is_held');
      }
      else
      {
        toggle_status(item.id, 'is_delivered');
      }  
    }

    function toggle_status(item_id, status_field)
    {
      var new_status = !get_order_pane_item(item_id)[status_field];
      get_item_and_child_items(item_id).forEach(function(item)
      {
        new_crud_command({command: "set_status", item_id: item.id, field: status_field, value: new_status});
      })
    }

    function pin_is_good(pin)
    {
      var params = "pin="+pin;
      var is_good = http_request("POST", "checkpin.py", params);
      return is_good;
    }
    
    function cook_style_order_items()
    {
      var uniq_order_items = {};
      //put all items into a dictionary whose key is all
      //properties that make us care that the items are different 
      for(var idx in g_order_pane_items)
      {
        var oi = g_order_pane_items[idx];
        var key = JSON.stringify([oi.table_id, oi.item_name, oi.is_held, oi.is_delivered, oi.price, oi.is_comped, oi.is_cancelled])
        if (key in uniq_order_items) {uniq_order_items[key].count += 1;}
        else {oi.count = 1; uniq_order_items[key] = oi;}
      }

      //now change it back to a list
      var uniq_order_items_list = [];
      for(var key in uniq_order_items) { uniq_order_items_list.push(uniq_order_items[key]); }

      //now order the list by held last then created time
      //descending
      uniq_order_items_list.sort(
        function (a,b) {return a.is_held - b.is_held || b.created - a.created;}
      );

      return uniq_order_items_list;
    }  

    function get_child_items(item_id)
    {
      child_items = [];
      for (var idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.parent_item == item_id)
        {
          child_items.push(item);
        }
      }  
      return child_items;
    }  

    function get_item_and_child_items(item_id)
    {
      items = [];
      for (var idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.id == item_id || item.parent_item == item_id)
        {
          items.push(item);
        }
      }  
      return items;
    }  

    function get_add_on_string_for(item_id)
    {
      add_on_string = "";
      child_items = get_child_items(item_id);
      for (var idx in child_items)
      {
        var style_class = child_items[idx].is_cancelled ? 'cancelled_item' : null;
        add_on_string += "<a class="+style_class+">, " + child_items[idx].item_name + "</a>";
      }  
      return add_on_string;
    }

    function refresh_cook_screen()
    {
      var order_items_html = "";

      var items = g_cook_style ? cook_style_order_items() : g_order_pane_items;
      for (var idx in items)
      {
        var item = items[idx];
        var classes = "order_item";

        if (item.is_delivered && (item.seconds_since_mod == null || item.seconds_since_mod > 15) || 
            item.table_id == 'MKT' && !g_market_style ||
            item.parent_item != null) 
        {
          continue;
        }

        config_item = get_config_item(item.item_name);
        if (config_item && config_item.cat == 'bev') {classes += ' bev_item'}
        if (config_item && config_item.subcat == 'boards') {classes += ' board_item'}
        if (config_item && config_item.subcat == 'allergy') {classes += ' allergy_item'}
        if (item.is_comped) {classes += ' comped_item'}
        if (item.is_held) {classes += ' held_item'}
        if (item.is_delivered) {classes += ' delivered_item'}
        if (item.is_cancelled) {classes += ' cancelled_item'}

        order_items_html += '<tr class="'+ classes + '">'
        order_items_html += 
        '<td onclick="cookscreen_table_click(\'' + item.table_id + '\')">' +
          item.table_id +
        '</td>';
        order_items_html += 
        '<td onclick="cookscreen_click(' + item.id + ')">' +
         (g_cook_style && item.count > 1 ? item.count + 'X ': '') +  
         item.item_name + get_add_on_string_for(item.id) +
        '</td>';
        var time_display = (
          item.minutes_since_mod == null?
            item.minutes_old : 
            item.minutes_old + '/' + item.minutes_since_mod
        )    
        order_items_html += '<td onclick="cookscreen_timeclick(' + item.id + ')">'+time_display+'</td>'
        order_items_html += '</tr>'

      }  
      cook_table.innerHTML = order_items_html;
    }

    function go_to_market()
    {
      set_current_table('MKT');
    }

    function go_to_cook_screen()
    {
      refresh_cook_screen();
      main_screen.style.display = "none";
      cook_screen.style.display = "inline";
    }

    function toggle_market_style()
    {
      g_market_style = !g_market_style;
      toggle_market_style_button.innerHTML = g_market_style ? 'MKT: hide': 'MKT: show';
      refresh_cook_screen();
    }

    function toggle_cook_style()
    {
      g_cook_style = !g_cook_style;
      toggle_cook_style_button.innerHTML = g_cook_style ? 'X-Style: hide': 'X-Style: show';
      refresh_cook_screen();
    }

    function leave_cook_screen()
    {
      cook_screen.style.display="none";
      main_screen.style.display="inline"; 
      refresh_screen();
    }

    function go_to_receipt_sceen()
    {
      window.scroll(0,0); 
      keypadclear();
      if(g_crud_commands.length > 0) {synchronize_now()}
      var receipt_text = http_request("POST", "texttab.py", "table="+g_currentTable);
      receipt_table.innerHTML = receipt_table_html(receipt_text);
      main_screen.style.display = "none";
      receipt_screen.style.display = "inline";
      if (g_currentTable == 'MKT')
      {
        print_and_close.disabled=false;
        just_close.disabled=false;
        pin = "0001"; //Salumi Guy
      }  
    }  

    function go_to_clock_sceen()
    {
      keypadclear();
      main_screen.style.display = "none";
      clock_screen.style.display = "inline";
      clock_screen_msg.innerHTML = "Time Clock";
    }  

    function leave_clock_screen()
    {
      keypadclear();
      clock_screen.style.display="none";
      main_screen.style.display="inline"; 
    }

    function clockin(in_)
    {
      var resp = http_request("POST", "clockin.py", 
        "in_="+in_+
        "&serverpin="+pin
      );

      clock_screen_msg.innerHTML = resp;
      clock_in.disabled=true;
      clock_out.disabled=true;
    }  

    function server_is_in(serverpin)
    {
      return http_request("POST", "clockin.py/server_is_in", "serverpin="+pin);
    }

    function close_check(shouldPrint)
    {
      var table = g_currentTable;
      http_request("POST", "close_tab.py", 
        "table="+table+
        "&shouldPrint="+shouldPrint+
        "&serverpin="+pin
      );
      synchronize_now();

      if (g_currentTable == 'MKT') {
        go_to_market();
      }
    }  

    g_order_pane_items = null;
    function get_order_pane_item(item_id)
    {
      console.log('get_order_pane_item: '+item_id);
      for (idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.id == item_id)
        {
          return item;
        }
      }
      console.log('get_order_pane_item id not found: '+item_id);
    }
      
    function update_order_pane(table_id)
    {
      document.getElementById("table_id_display").innerHTML = "Table: " + (table_id || '---');

      var order_items_html = "";
      for (idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.table_id != table_id) 
        {
          continue;
        }
        var classes = "order_item";
        if (item.is_held) {classes += ' held_item'}
        else if (!item.is_delivered) {classes += ' nondelivered_item'}
        if (item.is_comped) { classes += ' comped_item'}
        if (item.is_cancelled) { classes += ' cancelled_item'}
        if (item.parent_item != null) {classes += ' child_item'}

        order_items_html += '<input' +
          ' class="'+ classes + '"' +
          ' type=button' +
          ' onclick="orderitem_popup(' + item.id + ', event)"' +
          ' onmousedown="orderitem_mousedown(' + item.id + ', event, this)"' +
          ' value="'+item.item_name+'"' +
          '></input>';
      }  
      var order_items = document.getElementById("order_items");
      order_items.innerHTML = order_items_html;
    }
      
    function orderitem_mousedown(item_id, event, button)
    {
      button.style.backgroundColor = 'maroon';
    }  
      
    // Order popup stuff
    popup = null;
    function orderitem_popup(item_id, event)
    {
      popup = document.getElementById("orderitem_popup");
      popup.item_id = item_id;
      var item = get_order_pane_item(item_id);
      if (item.is_cancelled) { return;}
      g_current_parent = item.parent_item || item_id;
      popup.table_id = item.table_id;
      menu_popup_caption = document.getElementById("orderitem_popup_caption");
      menu_popup_caption.innerHTML = "table: "+item.table_id + " - " + item.item_name;
      
      holdgo_button = document.getElementById("holdgo");
      holdgo_button.style.display = item.is_delivered ? "none" : "inline";
      holdgo_button.value = item.is_held ? "release" : "hold";

      popup.style.visibility="visible";
      popup.style.left= document.body.clientWidth /8;
      var y = mouseY(event);
      popup.style.top= y - popup.clientHeight / 2;
      popup.focus();
    }

    function table_popup()
    {
      popup = document.getElementById("table_popup");
      popup_caption = document.getElementById("table_popup_caption");
      popup_caption.innerHTML = "Table: " + g_currentTable;
      
      popup.style.visibility="visible";
      popup.focus();
    }

    function receipt_table_html(receipt_text)
    {
      return "<pre id='receipt_text'>" + receipt_text + "<\pre>"
    }

    function leave_receipt_screen()
    {
      keypadclear();
      receipt_screen.style.display="none";
      main_screen.style.display="inline"; 
    }

    pin = "";
    function keypadpress(button, event)
    {
      event.stopPropagation();
      if (button.value == "CLR") { return keypadclear(); }

      pin += button.value;
      set_keypadhead( pin.replace(/./g,"#"));
      if (pin.length == 4) 
      { 
        if (pin_is_good(pin)) 
        {
          print_and_close.disabled=false;
          just_close.disabled=false;
          if (server_is_in(pin))
          {
            clock_out.disabled=false;
          }
          else
          {
            clock_in.disabled=false;
          }  
          disableKeyPad(true);    
          set_keypadhead( 'PIN recognized');
        }
        else
        {
          keypadclear();
          set_keypadhead('Unrecognized PIN');
        }
          
      }
    }

    function disableKeyPad(should)
    {
        keypadbuttons = keypad1.getElementsByTagName("input");
        for (idx in keypadbuttons)
        {
          keypadbuttons[idx].disabled = should;
        }
        keypadbuttons = keypad2.getElementsByTagName("input");
        for (idx in keypadbuttons)
        {
          keypadbuttons[idx].disabled = should;
        }
    }

    function set_keypadhead(msg)
    {
      keypadhead1.innerHTML = msg;
      keypadhead2.innerHTML = msg;
    }

    function keypadclear()
    {
      pin = "";
      set_keypadhead( "Enter 4 digit PIN to close tab.");
      print_and_close.disabled=true;
      just_close.disabled=true;
      clock_out.disabled=true;
      clock_in.disabled=true;
      disableKeyPad(false);
    }

    // These functions are necessary to get the mouse position in a 
    // way that works for all browsers
    function mouseX(evt) 
    {
      if (evt.pageX) 
      {
        return evt.pageX;
      }
      else if (evt.clientX)
      {
       return evt.clientX + (document.documentElement.scrollLeft ?
       document.documentElement.scrollLeft :
       document.body.scrollLeft);
      }
      else return null;
    }

    function mouseY(evt) 
    // See comment abouve mouseX, just above
    {
      if (evt.pageY)
      {
        return evt.pageY;
      }
      else if (evt.clientY)
      {
        return evt.clientY + (document.documentElement.scrollTop ?
        document.documentElement.scrollTop :
        document.body.scrollTop);
      }
      else return null;
    }

    function showPopup()
    // show the popup in the desried location when user clicks a square
    {
    }
    
    function plus_one()
    {
      var item = get_order_pane_item(popup.item_id);
      console.log('plus one ' + popup.item_id + ' ' + item.item_name);
      add_to_order(item.item_name, popup.table_id);
    }

    function cancel_item()
    {
      remove_from_order(popup.item_id);
    }  

    function cancel()
    // When the user hits the cancel or 'X' dialog buttons, the dialog
    // just needs to go away
    {
      hidePopup();
    }

    
    g_keyentry = "";
    function keydown(event)
    {
      if(event.which == 13 && g_keyentry.length > 0)
      {
        event.preventDefault();
        text_entered(g_keyentry);
        g_keyentry = "";
      }
      else
      {
        key = String.fromCharCode(event.which);
        if(key.match(/[0-9]/))
        {
          g_keyentry += key;
          add_item_box.innerHTML = g_keyentry;
        }  
        else
        {
          g_keyentry = "";
          add_item_box.innerHTML = "";
        }
      }
    }

    function text_entered(txt)
    {
      console.log('text_entered: '+ txt);
      add_to_order(txt, g_currentTable);
    }


    function clicked()
    {
      hidePopup();
      if (g_tab_to_move != null)
      {
      }
    }

    function hidePopup()
    // this function hides the pop-up when any of various things happen
    {
      if (popup) {popup.style.visibility="hidden"; }
    }

  </script>

</head>

<body onLoad="init()" id='main'>

  <div id="add_item_box" ></div>
  <div id="message_box" ></div>


  <div id="main_screen">
    <div id=linx>
    <!--<div><a href="javascript:goLeft()"  class="leftLink" id="goLeftLink">&lt;</a></div>-->
    <div><a href="javascript:go_to_cook_screen()"  class="leftLink" id="cooklink">C</a></div>
    <div><a href="javascript:go_to_clock_sceen()"  class="leftLink" id="clocklink">P</a></div>
    <div><a href="http://salumibarli.com:8888/wiki" class="leftLink" id="wlink">W</a></div>
    </div>
    <div id="board"></div>

    <div id="rightside">
      <!--<center><a href="javascript:goVertical()" id="goVerticalLink">^</a>
      <a href="javascript:goRight()" class="leftLink" id="goleftLink">&gt;</a>
      </center>-->
      <!--<div style="clear: both"></div>-->
      <div id="order_pane">
        <div id="table_display" onclick='go_to_receipt_sceen()'>
          <button id="table_id_display" class="order_item">---</button>
        </div>
        <center>===========</center>
        <div id="order_items" onclick="null"></div>
      </div>
    </div>  

  </div>
  <!-- This div is another screen. Initially it set to 
  visibility:hidden and it will take up the whole screen
  when it is shown, so it doesn't really matter where we put it 
  in the HTML. So we put it at the begining.
  -->
  <div id="clock_screen">
    <center>
    <div>
      <button id=clock_in onclick='clockin(true)'/>Clock In</button>
      <button id=clock_out onclick='clockin(false)'/>Clock Out</button>
      <button onclick='leave_clock_screen()'/>Go Back</button>
      <h1 id=clock_screen_msg></h1>
      <div id="keypad1" class="keypad">
        <h2 id=keypadhead1 colspan="3" align="center"></h2>
        <table cellpadding="2" cellspacing="2" border="0">
          <tr>
            <td><input class="keypadbutt" type="Button" value="1" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="2" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="3" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="4" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="5" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="6" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="7" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="8" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="9" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="0" 
              onclick="keypadpress(this, event)"></td>
            <td colspan=2><input class="keypadbutt" type="Button" value="CLR" 
              onclick="keypadpress(this, event)"></td>
          </tr>
        </table>
      </div>
    </center>
  </div>
  <div id="receipt_screen">
    <center>
    <table id="receipt_table"></table>
    <div onclick='leave_receipt_screen()'>
      <button id=print_and_close onclick='close_check(true)'>Print and Close</button>
      <button id=just_close onclick='close_check(false)'>Just Close</button>
      <button onclick='move_tab()'>Move Tab</button>
      <button>Go Back</button>

      <div id="keypad2" class="keypad">
        <h2 id=keypadhead2 colspan="3" align="center"></h2>
        <table cellpadding="2" cellspacing="2" border="0">
          <tr>
            <td><input class="keypadbutt" type="Button" value="1" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="2" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="3" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="4" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="5" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="6" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="7" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="8" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="9" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="0" 
              onclick="keypadpress(this, event)"></td>
            <td colspan=2><input class="keypadbutt" type="Button" value="CLR" 
              onclick="keypadpress(this, event)"></td>
          </tr>
        </table>
      </div>
    </center>
  </div>

  <div id="cook_screen">
        <button id=cook_screen_go_back onclick='leave_cook_screen()'>Go Back</button>
        <button id=toggle_cook_style_button onclick='toggle_cook_style()'>X-Style: show</button>
        <button id=toggle_market_style_button onclick='toggle_market_style()'>MKT: show</button>
        <table id="cook_table" cellspacing=2 cellpadding=2></table>
  </div>


  <div id ="orderitem_popup" class="diaframe">
    <div id="orderitem_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <div style="float: right; width: 50%">
        <input type="button" value="plus 1" onclick="plus_one()"> 
        <input type="button" value="delivered" onclick="toggle_status(popup.item_id, 'is_delivered')"> 
        <input type="button" value="do nothing"> 
      </div>
      <div style="float: left; width: 50%">
        <input id="holdgo" type="button" value="hold" onclick="toggle_status(popup.item_id, 'is_held')"> 
        <input type="button" value="comped" onclick="toggle_status(popup.item_id, 'is_comped')"> 
        <input type="button" value="cancel" onclick="cancel_item()"> 
      </div>
    </div>
  </div>

  <div id ="scale_popup" class="diaframe">
    <div id="scale_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <input id="lbs" type="text" value="0"> 
      <input id="oz" type="text" value="0"> 
    </div>
  </div>



</body>
</html>
