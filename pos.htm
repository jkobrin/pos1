<meta id="meta" name="viewport">
<html>

<head>

  <!-- css/site.css will be rewritten by apache to salumi.css or plancha.css, etc 
    depending on virtual host. see rewrite rule in apache configuration files-->
  <link rel="stylesheet" href="css/site.css?vers=103" type="text/css" />
  <link rel="stylesheet" href="pos_entry.css?vers=114" type="text/css" />

  <script type="text/javascript" src="jq453/scripts/jquery-1.11.2.js"></script>
  <script type="text/javascript" src="jsutils.js"></script>
  <script type="text/javascript" src="data_transfer.js"></script>
  <script type="text/javascript" src="config.js"></script>
  <script type="text/javascript" src="delivery_status.js"></script>
  <script type="text/javascript" src="pos_crud.js?1"></script>
  <script type="text/javascript" src="pos_item_tool_tip.js"></script>

  <script type="text/javascript" src="cookscreen.js?11"></script>
  <script type="text/javascript" src="receipt.js"></script>

  <script type="text/javascript" src="js/printing/epos-print-4.1.0.js"></script>
  <script type="text/javascript" src="js/printing/print.js"></script>
  <script> 

    STAFF_FOOD_RATE = .4;
    DEFAULT_PICKUP_MINUTES = 30;
    g_tab_to_move = null;

    g_currentTable = null; 
    g_session_id = null;
    g_id_seq = 0;

    function init()
    // This gets called when the document loads.
    {
      document.addEventListener('click', clicked, true)
      document.addEventListener('contextmenu', contexted, true)
      document.body.addEventListener('keydown', keydown, true)

      synchronize_now();
      document.getElementById("portal_link").setAttribute("href", g_config.portal_link);

      //window.onbeforeunload = save_state;
      //restore_state();
    }
      
    function get_new_session_id()
    {
      g_session_id = http_request("GET", "action.py/get_session_id", null);
      console.log('got session id: ' + g_session_id);
    }  

    function get_new_item_id()
    {
      console.log('g_session_id '+ g_session_id);
      if (!g_session_id) {get_new_session_id();}
      console.log('g_session_id '+ g_session_id);
      var id = g_session_id*100 + g_id_seq++;
      if(g_id_seq > 99)
      {
        get_new_session_id();
        g_id_seq = 0;
      }  
      return id;
    }


    /******** screen drawing **********/

    function refresh_screen()
    {
      add_item_box.innerHTML = g_keyentry;
      colorTables();
      update_order_pane(g_currentTable);
      refresh_cook_screen();
      receipt_screen_init();
      drawPostItNote();
    }

    function colorTables()
    {
      var tables = [];
      for(var cidx in g_config.menu.supercategories)
      {
        if (g_config.menu.supercategories[cidx].name == 'tables'){
          for (var scidx in g_config.menu.supercategories[cidx].categories)
          {
            tables = tables.concat(g_config.menu.supercategories[cidx].categories[scidx].items);
          }
          break;
        }  
      }    

      for (idx in tables) {
        var table_id = tables[idx].name;
        var released = 0; var held = 0; var ready = 0; var delivered = 0; var paid_before_close = 0;
        for(idx in g_order_pane_items) {
          var item  = g_order_pane_items[idx];

          if(item.table_id == table_id) // && item.is_cancelled == false)
          {
            if (item.paid_before_close) {paid_before_close = 1; break;}

            if (item.delivery_status == DELIVERY_STATUS_HELD) {held += 1;}
            else if (item.delivery_status == DELIVERY_STATUS_RELEASED) {released += 1;}
            else if (item.delivery_status == DELIVERY_STATUS_READY) {ready += 1;}
            else if (item.delivery_status == DELIVERY_STATUS_DELIVERED) {delivered += 1;}

          }  
        }  
        var backgroundColor = 
          paid_before_close > 0 ? 'aqua' : 
          ready > 0 ? 'red' : 
          released > 0 ? 'magenta' : 
          held > 0 ? 'yellow' : 
          delivered > 0 ? 'green' : 
          null;

        table_button = document.getElementById(table_id);
        if (table_button != null)
        {
          table_button.style.backgroundColor = backgroundColor;
        }
      }  
    }

    function refresh_button_board()
    {
      var board = document.getElementById("board");

      // save divs to restore collapse-state after rebuild
      var old_divs = document.querySelectorAll('.cat_div, .cat_head, .cat_button_div, .supercat_content_div');

      // start fresh
      board.innerHTML = "";

      for (cidx in g_config.menu.supercategories)
      {
        var supercat = g_config.menu.supercategories[cidx];
        var cats = supercat.categories;

        var supercat_div = document.createElement('div');
        supercat_div.id = supercat.name;
        supercat_div.setAttribute("class", "supercat_div");

        var supercat_head_div = document.createElement('div');
        supercat_head_div.setAttribute("class", "supercat_head");
        supercat_head_div.textContent = supercat.name;
        supercat_div.appendChild(supercat_head_div);

        var supercat_content_div = document.createElement('div');
        supercat_content_div.id = 'cat_cd_'+supercat.name;
        supercat_content_div.setAttribute("class", "supercat_content_div");
        supercat_div.appendChild(supercat_content_div);

        supercat_head_div.onclick = make_closure(toggle_vis, supercat_content_div);

        for (cidx in cats)
        {
          cat = cats[cidx];
          var cat_div = document.createElement('div');
          cat_div.id = cat.name;
          cat_div.setAttribute("class", "cat_div");

          var cat_head_div = document.createElement('div');
          cat_head_div.id = 'cat_head_'+cat.name;
          cat_head_div.setAttribute("class", "cat_head");
          cat_head_div.textContent = cat.name;
          cat_div.appendChild(cat_head_div);

          var cat_button_div = document.createElement('div');
          cat_button_div.id = 'cat_bd_'+cat.name;
          cat_button_div.setAttribute("class", "cat_button_div");
          cat_div.appendChild(cat_button_div);

          cat_head_div.onclick = make_closure(uncollapse, cat_div);

          current_subcategory = null;
          for (iidx in cat.items)
          {
            var item = cat.items[iidx];

            subcategory = item.subcategory;
            if (current_subcategory != subcategory && subcategory){
              current_subcategory = subcategory;
              var subcat_divider = document.createElement('div');
              subcat_divider.setAttribute('class', 'subcat_divider');
              subcat_divider.appendChild(document.createTextNode(subcategory));
              cat_button_div.appendChild(subcat_divider);
            }

            var grid_button = document.createElement('input');
            grid_button.type = 'button';
            grid_button.onclick=make_closure(grid_button_clicked, item);
            grid_button.ondblclick=make_closure(context_tool_tip, item);
            grid_button.oncontextmenu=make_closure(context_tool_tip, {'button': grid_button, 'item': item});
            grid_button.id = item.name;

            var button_class = 'menu_button';
            if (item.add_on){button_class += ' add_on_button' }
            if (item.onmenu == false) {button_class +=' notonmenu'}
            grid_button.setAttribute('class', button_class);
            grid_button.value = item.name;
            cat_button_div.appendChild(grid_button);
          }
          supercat_content_div.appendChild(cat_div);
        }
        board.appendChild(supercat_div);
      }

      // restore collapse-state from old nodes
      for(var idx =0; idx < old_divs.length; idx++){
        var oldnode = old_divs[idx];
        var new_matching_node = document.getElementById(oldnode.id);
        if (new_matching_node) {
          new_matching_node.style.display = oldnode.style.display;
          new_matching_node.style.backgroundColor = oldnode.style.backgroundColor;
        }
      }
    }

    function is_waiting_tab(input_tab)
    {
      var tab = get_config_item(input_tab);
      return (tab && (tab.category=='waiting' || tab.category=='takeout'|| tab.category=='other'));
    }

    function create_tab_descriptor_item()
    {
      var descriptor = prompt('Description for ' + g_currentTable +':');
      if (!descriptor) return;

      new_crud_command ({
        command: 'add_item',
        item_id: get_new_item_id(),
        item_name: descriptor,
        table_id: g_currentTable, 
        delivery_status: DELIVERY_STATUS_RELEASED,
        taxable: false, 
        is_comped: false,
        price: 0,
        fraction: 0,
        parent_item: null,
        menu_item_id: null 
      });
    }

    function set_current_table(table)
    {
      console.log("set current table: " + table);
      g_currentTable = table;
      update_order_pane(g_currentTable);
      set_current_parent();
      if (is_waiting_tab(g_currentTable) && !g_current_parent) {
        // create a descriptor item for convenience when tabs are for waiting ppl
        // (for tabs with no items g_current_parent will be
        // null so we are using that as a proxy for empty tab)
        create_tab_descriptor_item();
      }  
    }

    g_current_parent = null;
    function set_current_parent()
    {
      g_current_parent = null;
      var table_items = get_sorted_table_items(g_currentTable);
      for(var idx in table_items)
      {
        var item = table_items[idx];
        if(item.is_cancelled == false && !(item.is_open== false) && item.parent_item == null){ 
          g_current_parent = item.id;
          // the last non-child item on the current table will be
          // left in g_current_parent
        }
      }
    }  

    function uncollapse(cat_div)
    {
      var head = cat_div.children[0];
      var button_div = cat_div.children[1];
      toggle_vis(button_div);
      head.style.backgroundColor = (head.style.backgroundColor == 'white' ? null : 'white');
    }  

    function drawPostItNote(){
      document.getElementById('post_it_note').innerHTML = g_config.post_it_note;
    }

    function grid_button_clicked(cfg_item)
    {
      console.log('grid_button_clicked '+cfg_item.name+':'+cfg_item.supercategory+':'+cfg_item.category);
      if (cfg_item.supercategory == 'tables')
      {
        table_id = cfg_item.name;
        if(g_currentTable == table_id)
        {
          var reopen_id = http_request("GET", "reopen.py/get_reopen_id", "table="+table_id);
          if (reopen_id != null && confirm("Re-open table "+table_id+"?"))
          {
            http_request("POST", "reopen.py", "reopen_id="+reopen_id);
            synchronize_now();
          }  
        }
        if(g_tab_to_move != null)
        {
          if(confirm("Move all items from table "+g_tab_to_move+" to " + table_id+"?"))
          {
            var response = http_request("POST", "move_tab.py", "p_from="+g_tab_to_move+"&p_to="+table_id);
            if(response.success){
              synchronize_now();
            }  
            else {
              g_tab_to_move = null;
              alert(response.message);
              return;
            }
          }
          g_tab_to_move = null;
        }
        set_current_table(table_id);
      }
      else
      {
        add_to_order(cfg_item, g_currentTable);
      }
    }

    function is_happy_hour()
    {
      if (g_config.happy_hour && g_config.happy_hour.end && g_config.happy_hour.start)
      {
        var hour_now = (new Date()).getHours();
        var day_now = (new Date()).getDay();
        var is_happy_hour = g_config.happy_hour.start <= hour_now && 
        hour_now < g_config.happy_hour.end && day_now !=0 && day_now != 6;
        console.log("is_happy_hour daynow:"+day_now+" hournow:"+hour_now);
        console.log(g_config.happy_hour);
      }  
      else
      {
        var is_happy_hour = false;
      }  
      console.log("is_happy_hour: " + is_happy_hour);
      return is_happy_hour;
    }

    function is_staff(tab)
    {
      var tab = get_config_item(tab);
      return (tab && tab.category=='staff_tabs')
    }

    function is_market(tab)
    {
      var tab = get_config_item(tab);
      return (tab && tab.category=='market')
    }

    function is_takeout(tab)
    {
      var tab = get_config_item(tab);
      return (tab && tab.category=='takeout')
    }

    var last_item_added = null;
    function add_to_order(cfg_item, table_id)
    {
      if (!table_id) {return}

      console.log('add_item: '+ cfg_item.name+':'+cfg_item.category+':'+cfg_item.supercategory);
      var price = cfg_item.price; //usual case
      var item_name = cfg_item.name; //usual case
      //now that price is set to the default, let's see if we need to modify it

      if (cfg_item.name.slice(0,3) == 'qt:')
      {
        var fraction = .25;
      }
      else if(cfg_item.scalable && cfg_item.supercategory != 'wine')
      {
        //for now the only units are lbs.
        cfg_item.scale_units = 'lbs.';

        while(true)
        {
          var fraction = prompt('Quantity in '+cfg_item.scale_units,1)
          if(!isNaN(fraction)) break;
        }
        if (fraction == null) return; //they hit cancel; don't add item

        price = cfg_item.price * fraction;
        item_name = ''+fraction + cfg_item.scale_units + ' ' + cfg_item.name;
      }  
      else
      {
        var fraction = 1;
      }  
        
      if(is_staff(g_currentTable)) 
      {
        price = cfg_item.wholesale_price || cfg_item.price*STAFF_FOOD_RATE;
        price = price*(cfg_item.fraction || 1);
      }
      else if (is_happy_hour() && !is_market(g_currentTable)  && !is_takeout(g_currentTable)  && (cfg_item.name.slice(0,3) == 'qt:' ||cfg_item.category.match('.*[Bb]eer.*')))
      {
        console.log("applying happy our discount of "+g_config.happy_hour.discount);
        price = price -price*g_config.happy_hour.discount;
      }  

      var taxable = !(cfg_item.name.match(/\bgift\b|tax-free/) || cfg_item.supercategory == 'market' && 
          cfg_item.category.match(/household|drinks|food|candy|soda/)  == null)

      if(cfg_item.name.indexOf('special') != -1)
      {
          price = prompt('Enter price:', price);
          if (price == null) return;
          item_name = prompt('Enter name:', item_name + price);
          if (item_name == null) return;
      }

      if(cfg_item.name.indexOf('gift') != -1)
      {
        price = prompt('Enter price:', price);
        if (price == null) return;
        item_name = 'gift'+price;
      }  

      var comped = false;
      if (cfg_item.name.indexOf('gratuity') != -1) {comped = true}

      var new_item_id = get_new_item_id();
      if (cfg_item.add_on) {
        if (g_current_parent == null) 
        {
          alert(cfg_item.name + ' is an add on. It must be attached to something.');
          return; // We're done here. 
        }  
        var parent_item = g_current_parent;
      }else{
        var parent_item = null;
        g_current_parent = new_item_id;
      }

      new_crud_command ({
        command: 'add_item',
        item_id: new_item_id,
        item_name: item_name,
        table_id: table_id, 
        delivery_status: DELIVERY_STATUS_RELEASED,
        taxable: taxable, 
        is_comped: comped,
        price: price,
        fraction: fraction,
        parent_item: parent_item,
        menu_item_id: cfg_item.id,
      });

      //add_item_box.innerHTML += " : " + cfg_item.name + ' $' + price
    } 

    function remove_from_order(item_id) 
    {
      get_item_and_child_items(item_id).forEach(function(item)
      {
        new_crud_command({command: "cancel_item", item_id: item.id});
      })
      if(item_id == g_current_parent) {set_current_parent()}
    }

    function set_delivery_status(item_id, value)
    {
      get_item_and_child_items(item_id).forEach(function(item)
      {
        new_crud_command({command: "set_status", item_id: item.id, field: 'delivery_status', value: value});
      })
    }

    function toggle_status(item_id, status_field)
    {
      var new_status = !get_order_pane_item(item_id)[status_field];
      get_item_and_child_items(item_id).forEach(function(item)
      {
        new_crud_command({command: "set_status", item_id: item.id, field: status_field, value: new_status});
      })
    }

    function pin_is_good(pin)
    {
      var params = "pin="+pin;
      var is_good = http_request("POST", "checkpin.py", params);
      return is_good;
    }
    
    function go_to_screen(id)
    {
      var screens = document.getElementsByClassName('screen');
    	for (var idx=0; idx < screens.length;)
      {
        var screen = screens[idx++];
        screen.style.display = screen.id == id ? 'inline' : 'none';
      }

      //hide any dialogs
      var dialogs = document.getElementsByClassName('diaframe');
    	for (var idx=0; idx < dialogs.length;)
      {
        var dialog = dialogs[idx++];
        dialog.style.visibility = 'hidden';
      }
    }

    function go_to_clock_screen()
    {
      set_pin_and_do(function(){
        populate_receipts();
        go_to_screen('clock_screen');
      });
    }

    function leave_clock_screen()
    {
      hide_receipts();
      clock_screen.style.display = 'none';
      //go_to_screen('main_screen');
    }

    pin_callback=null;
    function pin_blur()
    {
      if(!pin_is_good(pinput.value)) {
        pinput.value = '';
        var try_again = confirm('PIN not recognized.');
        if (try_again) {
          return;
        }
        go_to_screen('main_screen');
      }
      else { 
        g_pin = pinput.value;
      }
      pinput.value = '';
      pinput_screen.style.display = 'none';
      pin_callback();
    }

    function set_pin_and_do(f)
    {
      pin_callback = f;
      pinput_screen.style.display = 'inline';
      pinput.focus();
    }
      
    function save_receipts()
    {
      var resp = http_request("POST", "server_receipt_entry.py", 
        format_http_params({
          'serverpin': g_pin,
          'cctotal': cctotal.value,
          'cctips': cctips.value,
          'cash_drop': cash_drop.value,
          'starting_cash': starting_cash.value,
          'cash_left_in_bank': cash_left_in_bank.value,
        })
      );
      alert('Receipts Saved.');
    }  
      
    function populate_receipts()
    {
      var todays_receipts = http_request("GET", "server_receipt_entry.py/get", 
        format_http_params({'serverpin': g_pin}));

      for(var propt in todays_receipts){
        //fields in data have same names as input box IDs
        document.getElementById(propt).value = todays_receipts[propt]
      }

      cctotal.focus();
      cctotal.select();
    }  

    function hide_receipts()
    {
      document.getElementById("receipts_table").style.display = 'none';
      document.getElementById("save_receipts_button").style.display='none';
      document.getElementById("show_receipts_button").style.display='inline';
    }

    function clockin(in_)
    {
      var resp = http_request("POST", "clockin.py", "in_="+in_+ "&serverpin="+g_pin);

      if (resp == 'already clocked in')
      {
        var yes = confirm('Already clocked in. Would you like to clock out and back in?')
        if(yes) {
          var resp = http_request("POST", "clockin.py", "in_=false&serverpin="+g_pin);
          resp += '\n' + http_request("POST", "clockin.py", "in_=true&serverpin="+g_pin());
        }
        else
        {
          return; //cancel
        }  
      }  
      if (resp == 'already clocked out')
      {
        var yes = confirm('Already clocked out. Would you like to clock in and back out?')
        if(yes) {
          var resp = http_request("POST", "clockin.py", "in_=true&serverpin="+g_pin);
          resp += '\n' + http_request("POST", "clockin.py", "in_=false&serverpin="+g_pin);
        }
        else
        {
          return; //cancel
        }  
      }  

      alert(resp);

      if (in_){ //covid survey
        var resp = http_request("POST", "clockin.py/get_server_first_name_last_name", "serverpin="+g_pin);
        window.open("./covid_survey.htm?fname="+resp.first_name+"&lname="+resp.last_name, '_blank');
      }

      go_to_screen('main_screen');
    }

    function table_is_paid(tab)
    {
      for(var idx in g_order_pane_items)
      {
        var oi = g_order_pane_items[idx];
        if (oi.paid_before_close && oi.table_id == tab) {return true;}
      }

      return false;
    }  
      
    function table_pickup_time(tab)
    {
      for(var idx in g_order_pane_items)
      {
        var oi = g_order_pane_items[idx];
        if (oi.table_id == tab && oi.pickup_time) {return oi.pickup_time;}
      }  

      return null;
    }  
      
    function get_sorted_table_items(table_id)
    {
      var table_items = []; // make a list of items on this table that we can sort
      for (var idx in g_order_pane_items)
      {
        var item = g_order_pane_items[idx];
        if (item.table_id == table_id) 
        {
          table_items.push(item);
        }
      }  

      table_items.sort(function(a,b){
        var akey = a.parent_item ? a.parent_item + .1 : a.id;
        var bkey = b.parent_item ? b.parent_item + .1 : b.id;
        return akey - bkey;
        }
      );

      return table_items;
     } 

    function update_order_pane(table_id)
    {
      document.getElementById("table_id_display").innerHTML = "Table: " + (table_id || '---');
      document.getElementById("order_pane").style.backgroundColor = table_is_paid(table_id) ? 'aqua' : 'white';

      var order_items = document.getElementById("order_items");
      order_items.innerHTML = '';

      var table_items = get_sorted_table_items(table_id);

      for (var idx in table_items)
      {
        var item = table_items[idx];
				var cfg_item = get_config_item_from_id(item.menu_item_id);

        var classes = "order_item";
        if (item.delivery_status == DELIVERY_STATUS_HELD) {classes += ' held_item'}
        else if (item.delivery_status == DELIVERY_STATUS_RELEASED) {classes += ' nondelivered_item'}
        else if (item.delivery_status == DELIVERY_STATUS_READY) {classes += ' ready_item'}
        if (item.is_comped) { classes += ' comped_item'}
        if (item.is_cancelled) { classes += ' cancelled_item'}
        if (item.parent_item != null) {classes += ' child_item'}

				var item_button = document.createElement('input');
				item_button.setAttribute('type', 'button');
        item_button.setAttribute('class', classes);
        item_button.setAttribute('value', item.item_name);
				//item_button.textContent = item.item_name;
        item_button.oncontextmenu=make_closure(context_tool_tip, {'button': item_button, 'item': cfg_item});
				item_button.onclick=make_closure(orderitem_popup, {'button': item_button, 'item': item});

				order_items.appendChild(item_button);

      }  
    }
      
    function orderitem_mousedown(item_id, event, button)
    {
      button.style.backgroundColor = 'maroon';
    }  
      
    // Order popup stuff
    popup = null;
    function orderitem_popup(args)
    {
			var item_button = args.button;
			var item = args.item;

      popup = document.getElementById("orderitem_popup");
      popup.item_id = item.id;
      if (item.is_cancelled || item.is_open == false) { return;}
      g_current_parent = item.parent_item || item.id;
      popup.table_id = item.table_id;
      menu_popup_caption = document.getElementById("orderitem_popup_caption");
      menu_popup_caption.textContent = "table: "+item.table_id + " - " + item.item_name;
      
      //holdgo_button = document.getElementById("holdgo");
      //holdgo_button.style.display = item.is_delivered ? "none" : "inline";
      //holdgo_button.value = item.is_held ? "release" : "hold";

      popup.style.visibility="visible";
      popup.style.left= document.body.clientWidth /8;
      //var y = mouseY(event);
      popup.style.top= Math.max(item_button.getBoundingClientRect().top - popup.clientHeight / 2, 0);
      popup.focus();
      console.log("orderitem_popup positioned at " + item_button.getBoundingClientRect().top);
    }

    function add_note()
    {
      var clicked_item = get_order_pane_item(popup.item_id);
      var parent_item = clicked_item.parent_item ? 
        get_order_pane_item(clicked_item.parent_item) :
        clicked_item;

      console.dir(clicked_item);

      var price = prompt('Enter price:', 0);
      if (price == null) return;
      item_name = prompt('Enter note:');
      if (item_name == null) return;
      new_crud_command ({
        command: 'add_item',
        item_id: get_new_item_id(),
        item_name: item_name,
        table_id: parent_item.table_id, 
        delivery_status: parent_item.delivery_status,
        taxable: parent_item.taxable, 
        is_comped: parent_item.is_comped,
        price: price,
        fraction: 1.0,
        parent_item: parent_item.id,
        menu_item_id: parent_item.menu_item_id
      });
    }

    function plus_one()
    {
      var item = get_order_pane_item(popup.item_id);
      console.log('plus one ' + popup.item_id + ' ' + item.item_name);

      var new_item_id = get_new_item_id();

      new_crud_command ({
        command: 'add_item',
        item_id: new_item_id,
        item_name: item.item_name,
        table_id: item.table_id, 
        delivery_status: DELIVERY_STATUS_RELEASED,
        taxable: item.taxable, 
        is_comped: item.is_comped,
        price: item.price,
        fraction: item.fraction,
        parent_item: item.parent_item,
        menu_item_id: item.menu_item_id
      });
      
      //if the item we just copied and therefore the new item is
      //not an add on (which we can tell by checking if the
      //parent_item field is null) then it should become the new
      //parent for any subsequent add ons
      if (item.parent_item == null){g_current_parent = new_item_id;}

      //copy children, if any
      var child_items = get_child_items(item.id);
      for (var idx in child_items)
      {
        var item = child_items[idx];
        new_crud_command ({
          command: 'add_item',
          item_id: get_new_item_id(),
          item_name: item.item_name,
          table_id: item.table_id, 
          delivery_status: DELIVERY_STATUS_RELEASED,
          taxable: item.taxable, 
          is_comped: item.is_comped,
          price: item.price,
          fraction: item.fraction,
          parent_item: new_item_id,
          menu_item_id: item.menu_item_id
        });
      }  
    }

    function cancel_item()
    {
      remove_from_order(popup.item_id);
    }  

    g_keyentry = "";
    function keydown(event)
    {
      if(event.which == 13 && g_keyentry.length > 0)
      {
        event.preventDefault();
        text_entered(g_keyentry);
        g_keyentry = "";
      }
      else
      {
        key = String.fromCharCode(event.which);
        if(key.match(/[0-9]/))
        {
          g_keyentry += key;
          add_item_box.innerHTML = g_keyentry;
        }  
        else
        {
          g_keyentry = "";
          add_item_box.innerHTML = "";
        }
      }
    }

    function text_entered(txt)
    {
      console.log('text_entered: '+ txt);
      item = get_config_item(txt);
      if (item) 
      {
        add_to_order(item, g_currentTable)
      } 
      else 
      { 
        //add_item_box.innerHTML = txt +' - item not found in inventory')
      };
    }


    function clicked(event)
    {
      hidePopups();
      if (g_tab_to_move != null)
      {
      }
    }

    function contexted(event)
    {
      hidePopups();
      //event.preventDefault();
      return false;
    }

    function hidePopups()
    // this function hides the pop-ups when any of various things happen
    {
  		var popups = document.getElementsByClassName('click_dismiss');
    	for (var popup_idx=0; popup_idx < popups.length; popup_idx++) 
      { 
        var popup = popups[popup_idx];
        popup.style.visibility = "hidden";
      }
    }


  g_scale = .5;
  function zoom(inout){
    g_scale += inout;
    document.getElementById("meta").setAttribute("content", 'initial-scale='+g_scale);
  }
  </script>

</head>

<body onLoad="init()" id='main'>


  <div id="main_screen" class='screen'>
    <div id=linx>
    <!--<div><a href="cookscreen.htm" class="leftLink" id="cooklink">C</a></div>-->
    <div><a href="javascript:go_to_screen('cook_screen')" class="leftLink" id="cooklink">C</a></div>
    <div><a href="javascript:go_to_clock_screen()" class="leftLink" id="clocklink">P</a></div>
    <div><a href="https://sites.google.com/view/salumi/p-o-r-t-a-l" class="leftLink" id="portal_link">I</a></div>
    <div style='font-size: 48pt' onclick='zoom(.05)'>+</div>
    <div style='font-size: 48pt' onclick='zoom(-.05)'>-</div>
    </div>

    <div id="board"></div>

    <div id="rightside">
      <div id="order_pane">
        <div id="table_display">
          <!--<a target='_self' href='receipt_screen.htm' id="table_id_display" class="order_item"></a>-->
          <a target='_self' 
            href='javascript: synchronize_now(); receipt_screen_init(); go_to_screen("receipt_screen")' 
            id="table_id_display" class="order_item"></a>
        </div>
        <div id="order_items" style='clear:both' onclick="null"></div>
      </div>
    </div>

  </div>

  <div id ="orderitem_popup" class="click_dismiss diaframe">
    <div id="orderitem_popup_head" class="diahead">
      <div id="orderitem_popup_caption" class="diacapt">---</div>
    </div>  
    <div class="diabuttons">
      <div style="float: right; width: 50%">
        <input type="button" value="hold" onclick="set_delivery_status(popup.item_id, DELIVERY_STATUS_HELD)"> 
        <input type="button" value="release" onclick="set_delivery_status(popup.item_id, DELIVERY_STATUS_RELEASED)"> 
        <input type="button" value="ready" onclick="set_delivery_status(popup.item_id, DELIVERY_STATUS_READY)"> 
        <input type="button" value="deliver" onclick="set_delivery_status(popup.item_id, DELIVERY_STATUS_DELIVERED)"> 
      </div>
      <div style="float: left; width: 50%">
        <input type="button" value="plus 1" onclick="plus_one()"> 
        <input type="button" value="note" onclick="add_note()"> 
        <input type="button" value="comped" onclick="toggle_status(popup.item_id, 'is_comped')"> 
        <input type="button" value="cancel" onclick="cancel_item()"> 
      </div>
    </div>
  </div>

  <div id="cook_screen" class='screen'>
    <button class='link' onclick='go_to_screen("main_screen")'>POS</button>
    <button class='link' onclick='toggle_cook_style(this)'>X-Style: show</button>
    <!--<button id=toggle_cook_style_button onclick='toggle_cook_style()'>X-Style: show</button>-->
    <div id ="cook_tables_div"></div>
  </div>

  <div id="clock_screen" class='screen'>
    <button id=clock_in onclick='clockin(true)'>Clock In</button>
    <button id=clock_out onclick='clockin(false)'>Clock Out</button>
    <div><label for='cctotal'>CCTotal<label></div><input id='cctotal' type="number"/>
    <div><label for='cctips'>CCTips</label></div><input id='cctips' type="number"/>
    <div><label for='cash_drop'>Cash Drop</label></div><input id='cash_drop' type="number"/>
    <div><label for='starting_cash'>Start Bank</label></div><input id='starting_cash' type="number"/>
    <div><label for='cash_left_in_bank'>End Bank</label></div><input id='cash_left_in_bank' type="number"/>
    <button id=save_receipts_button onclick='save_receipts()'>Save</button>
    <button onclick="go_to_screen('main_screen')">Go Back</button>
  </div>

  <div id="receipt_screen" class="screen">
    <center>
    <table id="receipt_table"></table>

    <div>
      <button id=print_and_close onclick='set_pin_and_do(function(){close_check(true)})'>Print and Close</button>
      <button id=just_close onclick='set_pin_and_do(function(){close_check(false)})'>Close</button>
      <button onclick='move_tab()'>Move Tab</button>
      <button id=paid onclick='set_pin_and_do(toggle_paid)'/>Paid</button>
      <button id=paid onclick='set_pickup()'/>Set Pickup</button>
      <button onclick="go_to_screen('main_screen')"/>Go Back</button>
    </div>

    </center>
  </div>


  <div id ="date_time_popup" class="diaframe centered">
    <div id="date_time_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <input name="date" id="pdate" type="date" value=""> 
      <input name="time" id="ptime" type="time" value=""> 
    </div>
    <button id="set_pickup_done" onclick='set_pickup_done()'>Done</button>
    <button id="set_pickup_cancel" onclick='set_pickup_cancel()'>Cancel</button>
  </div>

  <div id ="scale_popup" class="diaframe">
    <div id="scale_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <input id="lbs" type="text" value="0"> 
      <input id="oz" type="text" value="0"> 
    </div>
  </div>

  <div id='pinput_screen' class='screen'>
    <center>
    <input tabindex=1 id='pinput' type=number onblur='pin_blur()'/>
    <div tabindex=2 id='pintext'>Enter PIN</div>
    </center>
  </div>
  <div id="add_item_box" ></div>
  <div id="message_box" ></div>

  <div id="post_it_note">
  </div>

    <!-- invisible area for drawing gift certs -->
  <div style="display:hidden;">
      <canvas id="canvas" width="0" height="0"></canvas>
  </div>

</body>
</html>
