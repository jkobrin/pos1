<html>

<head>

  <style>

    #linx {float: left; height: 500px}
    #linx a {padding-bottom:80px}

    .order_item { 
      width: 100%; 
      background-color:transparent;
      border: none;
      font-size : 24pt;
    }
    
    .nondelivered_item { color: red; }

    .comped_item {font-style:italic; border: 6px solid #a0ffa0;}

    .bev_item {color: blue;}
    .board_item {color: maroon;}
    
    .menu_button 
    {
      font-size:14pt; font-weight:bold; height:100px; width:100px;
      background-color:#a0a0a0;
      white-space : normal;
    }

    .keypad
    {
      padding-top:25px;
    }

    .keypad button
    {
      font-size:36pt;
    }

    .keypad input
    {
      font-size:36pt;
    }

    .diaframe
    {
     position:absolute;
     font-family:arial;
     visibility:hidden;
     width:250;
     border:2px outset black;
     background-color:#A0A0C0;
    }

    .diacapt
    {
     height:35px;
     width: 95%;
     background-color:#5070B0;	
     padding-top:2px;
     padding-bottom:3px;
     padding-left:5%;
     font-weight:bold;
     color:white;	
    }

    .diabutt a{
     height:15px;
     font-family:arial;
     font-weight:bold;
     font-style:italic;
     background-color:#A0F0FF;
     text-align:center;
     text-decoration:none;
     padding-top:1px;
     padding-bottom:3px;
     margin-right:2px;
     border:2px solid gray;
    }

    .diabody
    {
     padding-top:5%;
     padding-left:5%;
     padding-right:5%;
     position:absolute;
     top:17px
    }

    .diainput
    {
     padding-top:5%;
     padding-bottom:5%;
    }

    .diabuttons
    {
     padding-top:5%;
     padding-bottom:5%;
    }

    .diabuttons input
    {
      height: 60px;
      width:90%;
      font-size: 36px;
      margin: 5%;
    }

    .diabuttons input:hover
    {
     color:red;
    }

    #receipt_screen
    {
      display: none;
    }

    #clock_screen
    {
      display: none;
    }

    #cook_screen
    {
      display: none;
    }

    #cook_screen button
    {
      width:50%;
      font-size: 30px;
      float: left;
    }

    #cook_table{
      width: 100%;
      text-align: center;
      border-width: 1px;
      border-spacing: 2px;
      border-style: outset;
      border-color: transparent;
      border-collapse: collapse;
      background-color: #B0B080;
      float: left;
    }

    #cook_table th 
    {
      border-width: 1px;
      padding: 1px;
      border-style: inset;
      -moz-border-radius: 0px 0px 0px 0px;
    }

    #cook_table td
    {
      border-width: 1px;
      padding: 1px;
      border-style: inset;
      -moz-border-radius: 0px 0px 0px 0px;
    }

    #receipt_screen button
    {
      font-size: 18pt;
    }  

    #clock_screen button
    {
      font-size: 18pt;
    }  

    body,h1,h2,h3,h4,h5,h6 {font-family:Arial;}

    body {background-color:gray; color:black; font-size:18}

    h1 {font-size:28pt; font-weight:bold; margin:0px;}

    h2 {font-size:16pt; margin:0px; font-weight:bold;}

    h3 {font-size:8pt; margin:0px; font-weight:bold;}

    #category {font-size:28pt; text-align: center}

    .goHorizontalLink {float: left; font-size:48}
    #goVerticalLink {float: right; font-size: 56; text-align: right}

    #rightside {float: right }
    #order_pane {width: 220px; border: 4px outset; margin-top:10px; }
    #order_pane :hover {background-color: yellow;}
    #select_area {width: 70%;}
    
    #table_display {width: 100%; margin: 5px; color: blue;}
    #table_id_display {width: 95%;}
    #receipt_text {font-family: monospace; font-size: 14pt;}

  </style>

  <script> 

    // This is the only script on this page. It does basically
    // everything. 
    
    MAIN_REFRESH_INTERVAL = 10000; //10 seconds
    COOK_SCREEN_REFRESH_INTERVAL = 10000; //10 seconds
    GRIDWIDTH = 6; 
    // GRIDWIDTH can be anything from one up.

    g_currentTable = null; 

    function init()
    {
      document.body.addEventListener('click',hidePopup, true)
      GRIDWIDTH = Math.floor(window.innerWidth - order_pane.clientWidth) / 120
      cook_screen_refresh_interval_id = setInterval("refresh_cook_screen()", COOK_SCREEN_REFRESH_INTERVAL);
    }  


    function http_request(method, url, params)
    {
      http = new XMLHttpRequest();
      if(method == "GET")
      {
        // append timestamp to url to prevent caching
        url += "?timestamp=" + new Date().getTime();

        if (params) {url += "&" + params;}
        http.open(method, url, false);
        http.send(null);
      }
      else
      {
        http.open(method, url, false);
        http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); 
        http.setRequestHeader("Content-length", params.length);
        http.setRequestHeader("Connection", "close");
        http.send(params);
      }

      response = http.responseText;

      if (http.status != 200)  {
      // Display error message on page
        document.write("Error getting config\n\n");
        document.write(response);
        return;
      }

      return eval('(' + response + ')');
    }  

    function load_config()
    {
      g_config = http_request("GET", "config.py/get", null);
    }  

    function get_config_item(item_name)
    {
      for(cat_idx in g_config.menu.categories)
      {
        cat = g_config.menu.categories[cat_idx];
        for(subcat_idx in cat.subcategories)
        {
          subcat = cat.subcategories[subcat_idx];
          for(item_idx in subcat.items)
          {
            citem = subcat.items[item_idx];
            if (citem.name == item_name)
            {
              citem.cat = cat.name;
              citem.subcat = subcat.name;
              return citem;
            }
          }
        }
      }
    }

      
    function draw()
    // This gets called when the document loads.
    {
      init();
      load_config();
      drawCurrentCategory();
      refresh_order(null, null);
      setInterval("main_refresh()", MAIN_REFRESH_INTERVAL);
    }

    function rotateCategory()
    {
      categories = g_config.menu.categories;
      categories.push(categories.shift());
    }

    function category_is_table()
    {
      return getSuperCategory() == 'tables';
    }  
      
    function goVertical()
    {
      rotateCategory();

      /*
      if (category_is_table())
      {
        // Skip tables. Go to next category. Tables is reached by
        // clicking table link.
        rotateCategory();
      } 
      */
      drawCurrentCategory();
    }
 
    function goHorizontal()
    {
      //alert(g_config.menu.categories[0].subcategories[0].items);
      subs = g_config.menu.categories[0].subcategories;
      //alert(g_config.menu.categories[0].subcategories[0].items);
      subs.push(subs.shift());
      //alert(g_config.menu.categories[0].subcategories[0].items);
      drawCurrentCategory();
    }

    function getSubCategory()
    {
      return g_config.menu.categories[0].subcategories[0].name;
    }  
      
    function getSuperCategory()
    {
      return g_config.menu.categories[0].name;
    }  
      
    coloredItems = null;

    function drawCurrentCategory()
    {
      //alert("items " + g_config.menu.categories[0].subcategories[0].items);
      document.getElementById("category").innerHTML 
        = getSuperCategory() + " : " + getSubCategory();
      populateMenuItems(getSubCategory());

    }  

    function resetTableColor(table_id)
    {
      table_button = document.getElementById(table_id);
      if (table_button != null)
      {
        table_button.firstChild.style.backgroundColor = "#a0a0a0";
      }
    }

    function colorTables()
    {
      if (category_is_table())
      {
        tables = http_request("GET", "open_tabs.py", null);

        for (idx in tables)
        {
          table_id = tables[idx].table_id;
          undelivered = tables[idx].undelivered;
          table_button = document.getElementById(table_id);
          if (table_button != null)
          {
            table_button.firstChild.style.backgroundColor = undelivered > 0 ? 'magenta' : 'green';
          }  
        }
      }
    }

    function set_current_table(table_id)
    {
      g_currentTable = table_id;
      refresh_order(null, null);
      window.scroll(0,0); 
    }

    function populateMenuItems(category)
    {
      items = g_config.menu.categories[0].subcategories[0].items;
      items_copy = items.map(function(i) {return i});
      drawBoard(items_copy);
    }

    function drawBoard(items)
    {
      board=document.getElementById("board");
      board.innerHTML = getTableHTML(items);
      colorTables();
    }
        
    function getTableHTML(items)
    // This function is called when the page a new category is
    // selected and the items in the table change. 
    // By changing GRIDWIDTH, the programmer can alter the look
    // of the table of items.
    {

      //alert(items.length);
      s="";

      s = s + "<table border=0 cellpadding=0 cellspacing=15 >";

      while (items.length)
      {

        s += "<tr>";    

        for (c=1; c <= GRIDWIDTH && items.length; c++)
        {
          item = items.shift();

          s += 
            "<td" +
            " class='square'" +
            " onclick='grid_button_clicked(this)'" +
            " id=\"" + item.name + "\"" +
            ">" +
            "<input " + 
            " class='menu_button'" +
            " type='button'"  + 
            " value=\"" + item.name + "\"" + 
            "/>" +
            "</td>";
        }

        s += "</tr>";

      }

      s += "</table>";

      return s;
    }

    function grid_button_dragged(button)
    {
    }

    function grid_button_clicked(button)
    {
      if (category_is_table())
      {
        set_current_table(button.id);
      }
      else
      {
        add_to_order(button.id);
      }
    }

    function go_to_tables()
    {
      while (!category_is_table())
      {
        rotateCategory();
      } 
      drawCurrentCategory();
      g_currentTable = null;
      update_order_pane([]);
      window.scroll(0,0);
    }

    function refresh_order(add_item, remove_item)
    {
      params="table="+g_currentTable;
      if(add_item)
      {
        // add_item is just a name, get the full object
        add_item = get_config_item(add_item);
        if(add_item == null)
        {
          alert("add item: " + add_item + " not found in config. Try reload.")
          return;
        }

        params += "&price="+add_item.price;
        params += "&additem="+add_item.name;
      }

      if (remove_item) 
      {
        params += "&removeitem="+remove_item;
        resetTableColor(g_currentTable);
      }

      order_items = http_request("POST", "action.py/order", params);
      update_order_pane(order_items);
      colorTables();
    }

    function mark_delivered()
    {
      params = "item_id="+popup.item_id;
      http_request("POST", "set_item_status.py/delivered", params);
      refresh_order(null, null);
    }

    function mark_comped()
    {
      params = "item_id="+popup.item_id;
      http_request("POST", "set_item_status.py/comped", params);
      refresh_order(null, null);
    }

    function pin_is_good(pin)
    {
      params = "pin="+pin;
      is_good = http_request("POST", "checkpin.py", params);
      return is_good;
    }

    function refresh_cook_screen()
    {
      params="table=ALL";
      order_items = http_request("POST", "action.py/order", params);

      order_items_html = "";
      for (idx in order_items)
      {
        item = order_items[idx];
        if (item.is_delivered) {continue}

        classes = "order_item";
        config_item = get_config_item(item.item_name);
        if (config_item && config_item.cat == 'bev') {classes += ' bev_item'}
        if (config_item && config_item.subcat == 'boards') {classes += ' board_item'}
        if (item.is_comped) {classes += ' comped_item'}

        order_items_html += '<tr class="'+ classes + '">'
        order_items_html += '<td>'+item.table_id+'</td>'
        order_items_html += '<td>'+item.item_name+'</td>';
        order_items_html += '<td>'+item.minutes_old+'</td>'
        order_items_html += '</tr>'

      }  
      cook_table.innerHTML = order_items_html;
    }

    function go_to_cook_screen()
    {
      refresh_cook_screen();
      main_screen.style.display = "none";
      cook_screen.style.display = "inline";
    }

    function leave_cook_screen()
    {
      cook_screen.style.display="none";
      main_screen.style.display="inline"; 
    }

    function go_to_receipt_sceen()
    {
      keypadclear();
      receipt_text = http_request("POST", "texttab.py", "table="+g_currentTable);
      receipt_table.innerHTML = receipt_table_html(receipt_text);
      main_screen.style.display = "none";
      receipt_screen.style.display = "inline";
    }  

    function go_to_clock_sceen()
    {
      keypadclear();
      main_screen.style.display = "none";
      clock_screen.style.display = "inline";
      clock_screen_msg.innerHTML = "Time Clock";
    }  

    function leave_clock_screen()
    {
      keypadclear();
      clock_screen.style.display="none";
      main_screen.style.display="inline"; 
    }

    function clockin(in_)
    {
      resp = http_request("POST", "clockin.py", 
        "in_="+in_+
        "&serverpin="+pin
      );

      clock_screen_msg.innerHTML = resp;
      clock_in.disabled=true;
      clock_out.disabled=true;
    }  

    function server_is_in(serverpin)
    {
      return http_request("POST", "clockin.py/server_is_in", "serverpin="+pin);
    }

    function close_check(shouldPrint)
    {
      table = g_currentTable;
      http_request("POST", "close_tab.py", 
        "table="+table+
        "&shouldPrint="+shouldPrint+
        "&serverpin="+pin
      );
      go_to_tables();
    }  

    function remove_from_order(item)
    {
      refresh_order(null, item);
    }  
      
    function order_item_click(button)
    {
    }  

    function main_refresh()
    {
      refresh_order(null, null);
      colorTables();
      refresh_cook_screen();
    }  
      
    order_pane_items = null;
    function get_order_pane_item(item_id)
    {
      for (idx in order_pane_items)
      {
        item = order_pane_items[idx];
        if (item.id == item_id)
        {
          return item;
        }
      }
    }
      
    function update_order_pane(items)
    {
      order_pane_items = order_items;
      document.getElementById("table_id_display").innerHTML = "Table: " + (g_currentTable || '---');

      order_items_html = "";
      for (idx in items)
      {
        item = items[idx];
        classes = "order_item";
        if (!item.is_delivered) {classes += ' nondelivered_item'}
        if (item.is_comped) { classes += ' comped_item'}

        order_items_html += '<input' +
          ' class="'+ classes + '"' +
          ' type=button' +
          ' onclick="orderitem_popup(' + item.id + ',this , event)"' +
          ' value="'+item.item_name+'"' +
          '></input>';
      }  
      order_items = document.getElementById("order_items");
      order_items.innerHTML = order_items_html;
    }
      
    function add_to_order(additem)
    {
      refresh_order(additem, null);
      //window.scroll(0,0);
    } 

    popup_item_id = null;
    // Order popup stuff
    popup = null;
    function orderitem_popup(item_id, inputbutton, e)
    {
      popup = document.getElementById("orderitem_popup");
      popup.item_id = item_id;
      menu_popup_caption = document.getElementById("orderitem_popup_caption");
      menu_popup_caption.innerHTML = inputbutton.value;
      
      popup.style.visibility="visible";
      popup.style.left= document.body.clientWidth - rightside.clientWidth - popup.clientWidth;
      y = mouseY(e);
      popup.style.top= y - popup.clientHeight / 2;
      popup.focus();
    }

    function table_popup()
    {
      popup = document.getElementById("table_popup");
      popup_caption = document.getElementById("table_popup_caption");
      popup_caption.innerHTML = "Table: " + g_currentTable;
      
      popup.style.visibility="visible";
      popup.focus();
    }

    function receipt_table_html(receipt_text)
    {
      return "<pre id='receipt_text'>" + receipt_text + "<\pre>"
    }

    function leave_receipt_screen()
    {
      keypadclear();
      receipt_screen.style.display="none";
      main_screen.style.display="inline"; 
    }

    pin = "";
    function keypadpress(button, event)
    {
      event.stopPropagation();
      if (button.value == "CLR") { return keypadclear(); }

      pin += button.value;
      set_keypadhead( pin.replace(/./g,"#"));
      if (pin.length == 4) 
      { 
        if (pin_is_good(pin)) 
        {
          print_and_close.disabled=false;
          just_close.disabled=false;
          if (server_is_in(pin))
          {
            clock_out.disabled=false;
          }
          else
          {
            clock_in.disabled=false;
          }  
          disableKeyPad(true);    
          set_keypadhead( 'PIN recognized');
        }
        else
        {
          keypadclear();
          set_keypadhead('Unrecognized PIN');
        }
          
      }
    }

    function disableKeyPad(should)
    {
        keypadbuttons = keypad1.getElementsByTagName("input");
        for (idx in keypadbuttons)
        {
          keypadbuttons[idx].disabled = should;
        }
        keypadbuttons = keypad2.getElementsByTagName("input");
        for (idx in keypadbuttons)
        {
          keypadbuttons[idx].disabled = should;
        }
    }

    function set_keypadhead(msg)
    {
      keypadhead1.innerHTML = msg;
      keypadhead2.innerHTML = msg;
    }

    function keypadclear()
    {
      pin = "";
      set_keypadhead( "Enter 4 digit PIN to close tab.");
      print_and_close.disabled=true;
      just_close.disabled=true;
      clock_out.disabled=true;
      clock_in.disabled=true;
      disableKeyPad(false);
    }

    // These functions are necessary to get the mouse position in a 
    // way that works for all browsers
    function mouseX(evt) 
    {
      if (evt.pageX) 
      {
        return evt.pageX;
      }
      else if (evt.clientX)
      {
       return evt.clientX + (document.documentElement.scrollLeft ?
       document.documentElement.scrollLeft :
       document.body.scrollLeft);
      }
      else return null;
    }

    function mouseY(evt) 
    // See comment abouve mouseX, just above
    {
      if (evt.pageY)
      {
        return evt.pageY;
      }
      else if (evt.clientY)
      {
        return evt.clientY + (document.documentElement.scrollTop ?
        document.documentElement.scrollTop :
        document.body.scrollTop);
      }
      else return null;
    }

    function showPopup()
    // show the popup in the desried location when user clicks a square
    {
    }
    
    function plus_one()
    {
      item = get_order_pane_item(popup.item_id);
      add_to_order(item.item_name, item.price);
    }  

    function cancel_item()
    {
      remove_from_order(popup.item_id);
    }  

    function cancel()
    // When the user hits the cancel or 'X' dialog buttons, the dialog
    // just needs to go away
    {
      hidePopup();
    }


    function enter(event)
    // When the user presses enter on the text editBox colorEdit we want
    // to interperet this to mean apply so we capture the keypress events
    // from the edit box and check if the key is the enter key
    {
      if (event.keyCode == 13)
      {
        colorEdit.blur(); 
        //otherwise you can still see the cursor after the dialog is hidden
        apply();
      }
    }

    function hidePopup()
    // this function hides the pop-up when any of various things happen
    {
      if (popup) { popup.style.visibility="hidden"; }
    }

  </script>

</head>

<body onLoad="draw()" id='main'>


  <div id="main_screen">
    <div id="rightside">
      <center><a href="javascript:goVertical()" id="goVerticalLink">^</a>
      <a href="javascript:goHorizontal()" class="goHorizontalLink" id="goHorizontalLink2">&lt;</a></center>
      <div style="clear: both"></div>
      <div id="order_pane">
        <div id="table_display" onclick='go_to_receipt_sceen()'>
          <button id="table_id_display" class="order_item">---</button>
        </div>
        <center>===========</center>
        <div id="order_items" onclick="null"></div>
      </div>
    </div>  

    <div id="select_area">
      <center>
        <a id="category">---</a>
        <div id=linx>
        <div><a href="javascript:goHorizontal()"  class="goHorizontalLink" id="goHorizontalLink">&lt;</a></div>
        <div><a href="javascript:go_to_cook_screen()"  class="goHorizontalLink" id="cooklink">C</a></div>
        <div><a href="javascript:go_to_tables()"  class="goHorizontalLink" id="tablelink">T</a></div>
        <div><a href="javascript:go_to_clock_sceen()"  class="goHorizontalLink" id="tablelink">P</a></div>
        </div>
        <div id="board"></div>
      </center>
    </div>
  </div>
  <!-- This div is another screen. Initially it set to 
  visibility:hidden and it will take up the whole screen
  when it is shown, so it doesn't really matter where we put it 
  in the HTML. So we put it at the begining.
  -->
  <div id="clock_screen">
    <center>
    <div>
      <button id=clock_in onclick='clockin(true)'/>Clock In</button>
      <button id=clock_out onclick='clockin(false)'/>Clock Out</button>
      <button onclick='leave_clock_screen()'/>Go Back</button>
      <h1 id=clock_screen_msg></h1>
      <div id="keypad1" class="keypad">
        <h2 id=keypadhead1 colspan="3" align="center"></h2>
        <table cellpadding="2" cellspacing="2" border="0">
          <tr>
            <td><input class="keypadbutt" type="Button" value="1" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="2" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="3" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="4" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="5" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="6" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="7" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="8" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="9" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="0" 
              onclick="keypadpress(this, event)"></td>
            <td colspan=2><input class="keypadbutt" type="Button" value="CLR" 
              onclick="keypadpress(this, event)"></td>
          </tr>
        </table>
      </div>
    </center>
  </div>
  <div id="receipt_screen">
    <center>
    <table id="receipt_table"></table>
    <div onclick='leave_receipt_screen()'>
      <button id=print_and_close onclick='close_check(true)'>Print and Close</button>
      <button id=just_close onclick='close_check(false)'>Just Close</button>
      <button onclick='go_to_tables()'>See Tables</button>
      <button>Go Back</button>

      <div id="keypad2" class="keypad">
        <h2 id=keypadhead2 colspan="3" align="center"></h2>
        <table cellpadding="2" cellspacing="2" border="0">
          <tr>
            <td><input class="keypadbutt" type="Button" value="1" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="2" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="3" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="4" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="5" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="6" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="7" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="8" 
              onclick="keypadpress(this, event)"></td>
            <td><input class="keypadbutt" type="Button" value="9" 
              onclick="keypadpress(this, event)"></td>
          </tr>
          <tr>
            <td><input class="keypadbutt" type="Button" value="0" 
              onclick="keypadpress(this, event)"></td>
            <td colspan=2><input class="keypadbutt" type="Button" value="CLR" 
              onclick="keypadpress(this, event)"></td>
          </tr>
        </table>
      </div>
    </center>
  </div>

  <div id="cook_screen">
        <button id=cook_screen_go_back onclick='leave_cook_screen()'>Go Back</button>
        <button id=cook_screen_refresh onclick='refresh_cook_screen()'>Refresh</button>
        <table id="cook_table" cellspacing=2 cellpadding=2></table>
  </div>


  <div id ="orderitem_popup" class="diaframe">
    <div id="orderitem_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <input type="button" value="cancel" onclick="cancel_item()"> 
      <input type="button" value="comped" onclick="mark_comped()"> 
      <input type="button" value="do nothing"> 
      <input type="button" value="delivered" onclick="mark_delivered()"> 
      <input type="button" value="plus 1" onclick="plus_one()"> 
    </div>
  </div>

  <div id ="table_popup" class="diaframe">
    <div id="table_popup_caption" class="diacapt">---</div>
    <div class="diabuttons">
      <input type="button" value="switch" onclick="go_to_tables()"> 
      <input type="button" value="close check" onclick="close_check()"> 
      <input type="button" value="do nothing"> 
    </div>
  </div>


</body>
</html>
